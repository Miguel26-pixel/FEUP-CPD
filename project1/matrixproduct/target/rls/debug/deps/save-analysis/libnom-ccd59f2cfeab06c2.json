{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3","program":"/home/mim/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","nom","/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"verbose-errors\"","-C","metadata=ccd59f2cfeab06c2","-C","extra-filename=-ccd59f2cfeab06c2","--out-dir","/home/mim/Documents/feup/3year/2semester/cdp/feup-cpd/project1/matrixproduct/target/rls/debug/deps","-L","dependency=/home/mim/Documents/feup/3year/2semester/cdp/feup-cpd/project1/matrixproduct/target/rls/debug/deps","--extern","memchr=/home/mim/Documents/feup/3year/2semester/cdp/feup-cpd/project1/matrixproduct/target/rls/debug/deps/libmemchr-97d2a9096a87321e.rmeta","--cap-lints","allow","--cfg","stable_i128","--error-format=json","--sysroot","/home/mim/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/mim/Documents/feup/3year/2semester/cdp/feup-cpd/project1/matrixproduct/target/rls/debug/deps/libnom-ccd59f2cfeab06c2.rmeta"},"prelude":{"crate_id":{"name":"nom","disambiguator":[17219365981250025659,0]},"crate_root":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src","external_crates":[{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[798608702779625658,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7109671234557425831,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3411557709944762924,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[12921548523464723800,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6899997536282251156,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[687943629592877148,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12833392627598952112,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8611991736582739271,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1080529115805509718,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14544331766457852493,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[11360267652732383009,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16194603435389573944,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[6282174087643825504,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[8437094131979181223,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[4977760173024244808,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[12513772310037050150,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[299995052859753608,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2099326727006642180,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[11226517024876910518,0]}},{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","num":20,"id":{"name":"memchr","disambiguator":[5978955147662444575,0]}}],"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":0,"byte_end":15060,"line_start":1,"line_end":471,"column_start":1,"column_end":15}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":191},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13732,"byte_end":13737,"line_start":389,"line_end":389,"column_start":19,"column_end":24},"alias_span":null,"name":"boxed","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":2673},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13739,"byte_end":13742,"line_start":389,"line_end":389,"column_start":26,"column_end":29},"alias_span":null,"name":"cmp","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":1099},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13744,"byte_end":13755,"line_start":389,"line_end":389,"column_start":31,"column_end":42},"alias_span":null,"name":"collections","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":2835},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13757,"byte_end":13764,"line_start":389,"line_end":389,"column_start":44,"column_end":51},"alias_span":null,"name":"convert","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":4445},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13766,"byte_end":13769,"line_start":389,"line_end":389,"column_start":53,"column_end":56},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":9731},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13771,"byte_end":13775,"line_start":389,"line_end":389,"column_start":58,"column_end":62},"alias_span":null,"name":"hash","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":4966},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13777,"byte_end":13781,"line_start":389,"line_end":389,"column_start":64,"column_end":68},"alias_span":null,"name":"iter","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":1832},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13783,"byte_end":13786,"line_start":389,"line_end":389,"column_start":70,"column_end":73},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":3089},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13788,"byte_end":13791,"line_start":389,"line_end":389,"column_start":75,"column_end":78},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":8241},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13793,"byte_end":13799,"line_start":389,"line_end":389,"column_start":80,"column_end":86},"alias_span":null,"name":"option","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":2,"index":8820},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13801,"byte_end":13807,"line_start":389,"line_end":389,"column_start":88,"column_end":94},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":4955},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13809,"byte_end":13814,"line_start":389,"line_end":389,"column_start":96,"column_end":101},"alias_span":null,"name":"slice","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":5240},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13816,"byte_end":13819,"line_start":389,"line_end":389,"column_start":103,"column_end":106},"alias_span":null,"name":"str","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":5446},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13821,"byte_end":13827,"line_start":389,"line_end":389,"column_start":108,"column_end":114},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":6303},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13829,"byte_end":13832,"line_start":389,"line_end":389,"column_start":116,"column_end":119},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":5,"index":5},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13829,"byte_end":13832,"line_start":389,"line_end":389,"column_start":116,"column_end":119},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":1,"index":15},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13876,"byte_end":13883,"line_start":391,"line_end":391,"column_start":20,"column_end":27},"alias_span":null,"name":"v1","value":"","parent":{"krate":0,"index":52}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13973,"byte_end":13974,"line_start":399,"line_end":399,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"ParseTo, InputLength, need_more, FindToken, Slice, AsChar, InputTakeAtPosition, Offset, InputIter","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13996,"byte_end":13997,"line_start":400,"line_end":400,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"Convert, ErrorKind","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14065,"byte_end":14066,"line_start":403,"line_end":403,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"Context","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14164,"byte_end":14165,"line_start":408,"line_end":408,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14191,"byte_end":14192,"line_start":409,"line_end":409,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Err, IResult, Needed","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14216,"byte_end":14217,"line_start":410,"line_end":410,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14242,"byte_end":14243,"line_start":411,"line_end":411,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14266,"byte_end":14267,"line_start":412,"line_end":412,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14293,"byte_end":14294,"line_start":413,"line_end":413,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14317,"byte_end":14318,"line_start":415,"line_end":415,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14341,"byte_end":14342,"line_start":416,"line_end":416,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14370,"byte_end":14371,"line_start":418,"line_end":418,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14392,"byte_end":14393,"line_start":419,"line_end":419,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14422,"byte_end":14423,"line_start":421,"line_end":421,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14497,"byte_end":14498,"line_start":425,"line_end":425,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":0,"byte_end":15060,"line_start":1,"line_end":471,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":150},{"krate":0,"index":177},{"krate":0,"index":221},{"krate":0,"index":583},{"krate":0,"index":614},{"krate":0,"index":624},{"krate":0,"index":634},{"krate":0,"index":653},{"krate":0,"index":657},{"krate":0,"index":680},{"krate":0,"index":687},{"krate":0,"index":723},{"krate":0,"index":920},{"krate":0,"index":955},{"krate":0,"index":967}],"decl_id":null,"docs":" # nom, eating data byte by byte","sig":null,"attributes":[{"value":"/ # nom, eating data byte by byte","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":0,"byte_end":35,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":36,"byte_end":39,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ nom is a parser combinator library with a focus on safe parsing,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":40,"byte_end":108,"line_start":3,"line_end":3,"column_start":1,"column_end":69}},{"value":"/ streaming patterns, and as much as possible zero copy.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":109,"byte_end":167,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":168,"byte_end":171,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":172,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":187,"byte_end":190,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":191,"byte_end":202,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":203,"byte_end":219,"line_start":9,"line_end":9,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":220,"byte_end":241,"line_start":10,"line_end":10,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":242,"byte_end":245,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug,PartialEq)]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":246,"byte_end":276,"line_start":12,"line_end":12,"column_start":1,"column_end":31}},{"value":"/ pub struct Color {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":277,"byte_end":299,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"/   pub red:     u8,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":300,"byte_end":322,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/   pub green:   u8,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":323,"byte_end":345,"line_start":15,"line_end":15,"column_start":1,"column_end":23}},{"value":"/   pub blue:    u8,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":346,"byte_end":368,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":369,"byte_end":374,"line_start":17,"line_end":17,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":375,"byte_end":378,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ fn from_hex(input: &str) -> Result<u8, std::num::ParseIntError> {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":379,"byte_end":448,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/   u8::from_str_radix(input, 16)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":449,"byte_end":484,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":485,"byte_end":490,"line_start":21,"line_end":21,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":491,"byte_end":494,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ fn is_hex_digit(c: char) -> bool {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":495,"byte_end":533,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/   c.is_digit(16)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":534,"byte_end":554,"line_start":24,"line_end":24,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":555,"byte_end":560,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":561,"byte_end":564,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ named!(hex_primary<&str, u8>,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":565,"byte_end":598,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/   map_res!(take_while_m_n!(2, 2, is_hex_digit), from_hex)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":599,"byte_end":660,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":661,"byte_end":667,"line_start":29,"line_end":29,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":668,"byte_end":671,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ named!(hex_color<&str, Color>,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":672,"byte_end":706,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/   do_parse!(","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":707,"byte_end":723,"line_start":32,"line_end":32,"column_start":1,"column_end":17}},{"value":"/            tag!(\"#\")   >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":724,"byte_end":753,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/     red:   hex_primary >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":754,"byte_end":783,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     green: hex_primary >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":784,"byte_end":813,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/     blue:  hex_primary >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":814,"byte_end":843,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/     (Color { red, green, blue })","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":844,"byte_end":880,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/   )","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":881,"byte_end":888,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":889,"byte_end":895,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":896,"byte_end":899,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":900,"byte_end":915,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/   assert_eq!(hex_color(\"#2F14DF\"), Ok((\"\", Color {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":916,"byte_end":970,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/     red: 47,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":971,"byte_end":987,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"/     green: 20,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":988,"byte_end":1006,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/     blue: 223,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1007,"byte_end":1025,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/   })));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1026,"byte_end":1037,"line_start":46,"line_end":46,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1038,"byte_end":1043,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1044,"byte_end":1051,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1052,"byte_end":1055,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The code is available on [Github](https://github.com/Geal/nom)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1056,"byte_end":1122,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1123,"byte_end":1126,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ There are a few [guides](https://github.com/Geal/nom/tree/master/doc) with more details","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1127,"byte_end":1218,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ about [the design of nom](https://github.com/Geal/nom/blob/master/doc/how_nom_macros_work.md),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1219,"byte_end":1317,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ [how to write parsers](https://github.com/Geal/nom/blob/master/doc/making_a_new_parser_from_scratch.md),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1318,"byte_end":1426,"line_start":54,"line_end":54,"column_start":1,"column_end":109}},{"value":"/ or the [error management system](https://github.com/Geal/nom/blob/master/doc/error_management.md).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1427,"byte_end":1529,"line_start":55,"line_end":55,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ **Looking for a specific combinator? Read the","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1534,"byte_end":1583,"line_start":57,"line_end":57,"column_start":1,"column_end":50}},{"value":"/ [\"choose a combinator\" guide](https://github.com/Geal/nom/blob/master/doc/choosing_a_combinator.md)**","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1584,"byte_end":1689,"line_start":58,"line_end":58,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1690,"byte_end":1693,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ If you are upgrading to nom 2.0, please read the","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1694,"byte_end":1746,"line_start":60,"line_end":60,"column_start":1,"column_end":53}},{"value":"/ [migration document](https://github.com/Geal/nom/blob/master/doc/upgrading_to_nom_2.md).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1747,"byte_end":1839,"line_start":61,"line_end":61,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1840,"byte_end":1843,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ If you are upgrading to nom 4.0, please read the","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1844,"byte_end":1896,"line_start":63,"line_end":63,"column_start":1,"column_end":53}},{"value":"/ [migration document](https://github.com/Geal/nom/blob/master/doc/upgrading_to_nom_4.md).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1897,"byte_end":1989,"line_start":64,"line_end":64,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1990,"byte_end":1993,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ See also the [FAQ](https://github.com/Geal/nom/blob/master/doc/FAQ.md).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":1994,"byte_end":2069,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2070,"byte_end":2073,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Parser combinators","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2074,"byte_end":2099,"line_start":68,"line_end":68,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2100,"byte_end":2103,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Parser combinators are an approach to parsers that is very different from","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2104,"byte_end":2181,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ software like [lex](https://en.wikipedia.org/wiki/Lex_(software)) and","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2182,"byte_end":2255,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/ [yacc](https://en.wikipedia.org/wiki/Yacc). Instead of writing the grammar","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2256,"byte_end":2334,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/ in a separate file and generating the corresponding code, you use very small","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2335,"byte_end":2415,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ functions with very specific purpose, like \"take 5 bytes\", or \"recognize the","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2416,"byte_end":2496,"line_start":74,"line_end":74,"column_start":1,"column_end":81}},{"value":"/ word 'HTTP'\", and assemble then in meaningful patterns like \"recognize","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2497,"byte_end":2571,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/ 'HTTP', then a space, then a version\".","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2572,"byte_end":2614,"line_start":76,"line_end":76,"column_start":1,"column_end":43}},{"value":"/ The resulting code is small, and looks like the grammar you would have","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2615,"byte_end":2689,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ written with other parser approaches.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2690,"byte_end":2731,"line_start":78,"line_end":78,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2732,"byte_end":2735,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This has a few advantages:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2736,"byte_end":2766,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2767,"byte_end":2770,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - the parsers are small and easy to write","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2771,"byte_end":2816,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/ - the parsers components are easy to reuse (if they're general enough, please add them to nom!)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2817,"byte_end":2916,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ - the parsers components are easy to test separately (unit tests and property-based tests)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":2917,"byte_end":3011,"line_start":84,"line_end":84,"column_start":1,"column_end":95}},{"value":"/ - the parser combination code looks close to the grammar you would have written","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3012,"byte_end":3095,"line_start":85,"line_end":85,"column_start":1,"column_end":84}},{"value":"/ - you can build partial parsers, specific to the data you need at the moment, and ignore the rest","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3096,"byte_end":3197,"line_start":86,"line_end":86,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3198,"byte_end":3201,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Here is an example of one such parser, to recognize text between parentheses:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3202,"byte_end":3283,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3284,"byte_end":3287,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3288,"byte_end":3299,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3300,"byte_end":3316,"line_start":91,"line_end":91,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3317,"byte_end":3338,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3339,"byte_end":3342,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3343,"byte_end":3360,"line_start":94,"line_end":94,"column_start":1,"column_end":18}},{"value":"/ named!(parens, delimited!(char!('('), is_not!(\")\"), char!(')')));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3361,"byte_end":3430,"line_start":95,"line_end":95,"column_start":1,"column_end":70}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3431,"byte_end":3438,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3439,"byte_end":3446,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3447,"byte_end":3450,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ It defines a function named `parens`, which will recognize a sequence of the character `(`, the longest byte array not containing `)`, then the character `)`, and will return the byte array in the middle.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3451,"byte_end":3659,"line_start":99,"line_end":99,"column_start":1,"column_end":209}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3660,"byte_end":3663,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Here is another parser, written without using nom's macros this time:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3664,"byte_end":3737,"line_start":101,"line_end":101,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3738,"byte_end":3741,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3742,"byte_end":3753,"line_start":103,"line_end":103,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3754,"byte_end":3770,"line_start":104,"line_end":104,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3771,"byte_end":3792,"line_start":105,"line_end":105,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3793,"byte_end":3796,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ use nom::{IResult,Err,Needed};","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3797,"byte_end":3831,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3832,"byte_end":3835,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3836,"byte_end":3853,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/ fn take4(i:&[u8]) -> IResult<&[u8], &[u8]>{","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3854,"byte_end":3901,"line_start":110,"line_end":110,"column_start":1,"column_end":48}},{"value":"/   if i.len() < 4 {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3902,"byte_end":3924,"line_start":111,"line_end":111,"column_start":1,"column_end":23}},{"value":"/     Err(Err::Incomplete(Needed::Size(4)))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3925,"byte_end":3970,"line_start":112,"line_end":112,"column_start":1,"column_end":46}},{"value":"/   } else {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3971,"byte_end":3985,"line_start":113,"line_end":113,"column_start":1,"column_end":15}},{"value":"/     Ok((&i[4..],&i[0..4]))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":3986,"byte_end":4016,"line_start":114,"line_end":114,"column_start":1,"column_end":31}},{"value":"/   }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4017,"byte_end":4024,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4025,"byte_end":4030,"line_start":116,"line_end":116,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4031,"byte_end":4038,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4039,"byte_end":4046,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4047,"byte_end":4050,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ This function takes a byte array as input, and tries to consume 4 bytes.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4051,"byte_end":4127,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ Writing all the parsers manually, like this, is dangerous, despite Rust's safety features. There","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4128,"byte_end":4228,"line_start":121,"line_end":121,"column_start":1,"column_end":101}},{"value":"/ are still a lot of mistakes one can make. That's why nom provides a list of macros to help in","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4229,"byte_end":4326,"line_start":122,"line_end":122,"column_start":1,"column_end":98}},{"value":"/ developing parsers.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4327,"byte_end":4350,"line_start":123,"line_end":123,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4351,"byte_end":4354,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ With macros, you would write it like this:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4355,"byte_end":4401,"line_start":125,"line_end":125,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4402,"byte_end":4405,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4406,"byte_end":4417,"line_start":127,"line_end":127,"column_start":1,"column_end":12}},{"value":"/ #[macro_use]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4418,"byte_end":4434,"line_start":128,"line_end":128,"column_start":1,"column_end":17}},{"value":"/ extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4435,"byte_end":4456,"line_start":129,"line_end":129,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4457,"byte_end":4460,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4461,"byte_end":4478,"line_start":131,"line_end":131,"column_start":1,"column_end":18}},{"value":"/ named!(take4, take!(4));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4479,"byte_end":4507,"line_start":132,"line_end":132,"column_start":1,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4508,"byte_end":4515,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4516,"byte_end":4523,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4524,"byte_end":4527,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ A parser in nom is a function which, for an input type `I`, an output type `O`","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4528,"byte_end":4610,"line_start":136,"line_end":136,"column_start":1,"column_end":83}},{"value":"/ and an optional error type `E`, will have the following signature:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4611,"byte_end":4681,"line_start":137,"line_end":137,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4682,"byte_end":4685,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4686,"byte_end":4704,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"/ fn parser(input: I) -> IResult<I, O, E>;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4705,"byte_end":4749,"line_start":140,"line_end":140,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4750,"byte_end":4757,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4758,"byte_end":4761,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Or like this, if you don't want to specify a custom error type (it will be `u32` by default):","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4762,"byte_end":4859,"line_start":143,"line_end":143,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4860,"byte_end":4863,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4864,"byte_end":4882,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/ fn parser(input: I) -> IResult<I, O>;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4883,"byte_end":4924,"line_start":146,"line_end":146,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4925,"byte_end":4932,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4933,"byte_end":4936,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ `IResult` is an alias for the `Result` type:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4937,"byte_end":4985,"line_start":149,"line_end":149,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4986,"byte_end":4989,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":4990,"byte_end":5001,"line_start":151,"line_end":151,"column_start":1,"column_end":12}},{"value":"/ use nom::{Needed, Context};","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5002,"byte_end":5033,"line_start":152,"line_end":152,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5034,"byte_end":5037,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ type IResult<I, O, E = u32> = Result<(I, O), Err<I, E>>;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5038,"byte_end":5098,"line_start":154,"line_end":154,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5099,"byte_end":5102,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ enum Err<I, E = u32> {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5103,"byte_end":5129,"line_start":156,"line_end":156,"column_start":1,"column_end":27}},{"value":"/   Incomplete(Needed),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5130,"byte_end":5155,"line_start":157,"line_end":157,"column_start":1,"column_end":26}},{"value":"/   Error(Context<I, E>),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5156,"byte_end":5183,"line_start":158,"line_end":158,"column_start":1,"column_end":28}},{"value":"/   Failure(Context<I, E>),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5184,"byte_end":5213,"line_start":159,"line_end":159,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5214,"byte_end":5219,"line_start":160,"line_end":160,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5220,"byte_end":5227,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5228,"byte_end":5231,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ It can have the following values:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5232,"byte_end":5269,"line_start":163,"line_end":163,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5270,"byte_end":5273,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ - a correct result `Ok((I,O))` with the first element being the remaining of the input (not parsed yet), and the second the output value;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5274,"byte_end":5415,"line_start":165,"line_end":165,"column_start":1,"column_end":142}},{"value":"/ - an error `Err(Err::Error(c))` with `c` an enum that contains an error code with its position in the input, and optionally a chain of accumulated errors;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5416,"byte_end":5574,"line_start":166,"line_end":166,"column_start":1,"column_end":159}},{"value":"/ - an error `Err(Err::Incomplete(Needed))` indicating that more input is necessary. `Needed` can indicate how much data is needed","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5575,"byte_end":5707,"line_start":167,"line_end":167,"column_start":1,"column_end":133}},{"value":"/ - an error `Err(Err::Failure(c))`. It works like the `Error` case, except it indicates an unrecoverable error: we cannot backtrack and test another parser","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5708,"byte_end":5866,"line_start":168,"line_end":168,"column_start":1,"column_end":159}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5867,"byte_end":5870,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ Please refer to the [documentation][doc] for an exhaustive list of parsers. See also the","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5871,"byte_end":5963,"line_start":170,"line_end":170,"column_start":1,"column_end":93}},{"value":"/ [\"choose a combinator\" guide](https://github.com/Geal/nom/blob/master/doc/choosing_a_combinator.md)**.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":5964,"byte_end":6070,"line_start":171,"line_end":171,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6071,"byte_end":6074,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ ## Making new parsers with macros","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6075,"byte_end":6112,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6113,"byte_end":6116,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Macros are the main way to make new parsers by combining other ones. Those macros accept other macros or function names as arguments. You then need to make a function out of that combinator with **`named!`**, or a closure with **`closure!`**. Here is how you would do, with the **`tag!`** and **`take!`** combinators:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6117,"byte_end":6438,"line_start":175,"line_end":175,"column_start":1,"column_end":322}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6439,"byte_end":6442,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6443,"byte_end":6454,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6455,"byte_end":6491,"line_start":178,"line_end":178,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6492,"byte_end":6509,"line_start":179,"line_end":179,"column_start":1,"column_end":18}},{"value":"/ named!(abcd_parser, tag!(\"abcd\")); // will consume bytes if the input begins with \"abcd\"","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6510,"byte_end":6602,"line_start":180,"line_end":180,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6603,"byte_end":6606,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ named!(take_10, take!(10));        // will consume and return 10 bytes of input","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6607,"byte_end":6690,"line_start":182,"line_end":182,"column_start":1,"column_end":84}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6691,"byte_end":6698,"line_start":183,"line_end":183,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6699,"byte_end":6706,"line_start":184,"line_end":184,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6707,"byte_end":6710,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ The **`named!`** macro can take three different syntaxes:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6711,"byte_end":6772,"line_start":186,"line_end":186,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6773,"byte_end":6776,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6777,"byte_end":6795,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/ named!(my_function( &[u8] ) -> &[u8], tag!(\"abcd\"));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6796,"byte_end":6852,"line_start":189,"line_end":189,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6853,"byte_end":6856,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ named!(my_function<&[u8], &[u8]>, tag!(\"abcd\"));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6857,"byte_end":6909,"line_start":191,"line_end":191,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6910,"byte_end":6913,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ named!(my_function, tag!(\"abcd\")); // when you know the parser takes &[u8] as input, and returns &[u8] as output","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":6914,"byte_end":7030,"line_start":193,"line_end":193,"column_start":1,"column_end":117}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7031,"byte_end":7038,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7039,"byte_end":7042,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ **IMPORTANT NOTE**: Rust's macros can be very sensitive to the syntax, so you may encounter an error compiling parsers like this one:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7043,"byte_end":7180,"line_start":196,"line_end":196,"column_start":1,"column_end":138}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7181,"byte_end":7184,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7185,"byte_end":7196,"line_start":198,"line_end":198,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7197,"byte_end":7233,"line_start":199,"line_end":199,"column_start":1,"column_end":37}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7234,"byte_end":7265,"line_start":200,"line_end":200,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7266,"byte_end":7283,"line_start":201,"line_end":201,"column_start":1,"column_end":18}},{"value":"/ named!(my_function<&[u8], Vec<&[u8]>>, many0!(tag!(\"abcd\")));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7284,"byte_end":7349,"line_start":202,"line_end":202,"column_start":1,"column_end":66}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7350,"byte_end":7357,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7358,"byte_end":7361,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7362,"byte_end":7398,"line_start":205,"line_end":205,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7399,"byte_end":7417,"line_start":206,"line_end":206,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7418,"byte_end":7425,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7426,"byte_end":7429,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ You will get the following error: `error: expected an item keyword`. This","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7430,"byte_end":7507,"line_start":209,"line_end":209,"column_start":1,"column_end":78}},{"value":"/ happens because `>>` is seen as an operator, so the macro parser does not","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7508,"byte_end":7585,"line_start":210,"line_end":210,"column_start":1,"column_end":78}},{"value":"/ recognize what we want. There is a way to avoid it, by inserting a space:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7586,"byte_end":7663,"line_start":211,"line_end":211,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7664,"byte_end":7667,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7668,"byte_end":7679,"line_start":213,"line_end":213,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7680,"byte_end":7716,"line_start":214,"line_end":214,"column_start":1,"column_end":37}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7717,"byte_end":7748,"line_start":215,"line_end":215,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7749,"byte_end":7766,"line_start":216,"line_end":216,"column_start":1,"column_end":18}},{"value":"/ named!(my_function<&[u8], Vec<&[u8]> >, many0!(tag!(\"abcd\")));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7767,"byte_end":7833,"line_start":217,"line_end":217,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7834,"byte_end":7841,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7842,"byte_end":7878,"line_start":219,"line_end":219,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7879,"byte_end":7897,"line_start":220,"line_end":220,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7898,"byte_end":7905,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7906,"byte_end":7909,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ This will compile correctly. I am very sorry for this inconvenience.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7910,"byte_end":7982,"line_start":223,"line_end":223,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7983,"byte_end":7986,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ## Combining parsers","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":7987,"byte_end":8011,"line_start":225,"line_end":225,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8012,"byte_end":8015,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ There are more high level patterns, like the **`alt!`** combinator, which provides a choice between multiple parsers. If one branch fails, it tries the next, and returns the result of the first parser that succeeds:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8016,"byte_end":8235,"line_start":227,"line_end":227,"column_start":1,"column_end":220}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8236,"byte_end":8239,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8240,"byte_end":8251,"line_start":229,"line_end":229,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8252,"byte_end":8288,"line_start":230,"line_end":230,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8289,"byte_end":8306,"line_start":231,"line_end":231,"column_start":1,"column_end":18}},{"value":"/ named!(alt_tags, alt!(tag!(\"abcd\") | tag!(\"efgh\")));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8307,"byte_end":8363,"line_start":232,"line_end":232,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8364,"byte_end":8367,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(alt_tags(b\"abcdxxx\"), Ok((&b\"xxx\"[..], &b\"abcd\"[..])));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8368,"byte_end":8438,"line_start":234,"line_end":234,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(alt_tags(b\"efghxxx\"), Ok((&b\"xxx\"[..], &b\"efgh\"[..])));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8439,"byte_end":8509,"line_start":235,"line_end":235,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(alt_tags(b\"ijklxxx\"), Err(nom::Err::Error(error_position!(&b\"ijklxxx\"[..], nom::ErrorKind::Alt))));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8510,"byte_end":8624,"line_start":236,"line_end":236,"column_start":1,"column_end":115}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8625,"byte_end":8632,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8633,"byte_end":8640,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8641,"byte_end":8644,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ The pipe `|` character is used as separator.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8645,"byte_end":8693,"line_start":240,"line_end":240,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8694,"byte_end":8697,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ The **`opt!`** combinator makes a parser optional. If the child parser returns an error, **`opt!`** will succeed and return None:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8698,"byte_end":8831,"line_start":242,"line_end":242,"column_start":1,"column_end":134}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8832,"byte_end":8835,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8836,"byte_end":8847,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8848,"byte_end":8884,"line_start":245,"line_end":245,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8885,"byte_end":8902,"line_start":246,"line_end":246,"column_start":1,"column_end":18}},{"value":"/ named!( abcd_opt< &[u8], Option<&[u8]> >, opt!( tag!(\"abcd\") ) );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8903,"byte_end":8972,"line_start":247,"line_end":247,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8973,"byte_end":8976,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(abcd_opt(b\"abcdxxx\"), Ok((&b\"xxx\"[..], Some(&b\"abcd\"[..]))));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":8977,"byte_end":9053,"line_start":249,"line_end":249,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(abcd_opt(b\"efghxxx\"), Ok((&b\"efghxxx\"[..], None)));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9054,"byte_end":9120,"line_start":250,"line_end":250,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9121,"byte_end":9128,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9129,"byte_end":9136,"line_start":252,"line_end":252,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9137,"byte_end":9140,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ **`many0!`** applies a parser 0 or more times, and returns a vector of the aggregated results:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9141,"byte_end":9239,"line_start":254,"line_end":254,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9240,"byte_end":9243,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9244,"byte_end":9255,"line_start":256,"line_end":256,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9256,"byte_end":9292,"line_start":257,"line_end":257,"column_start":1,"column_end":37}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9293,"byte_end":9324,"line_start":258,"line_end":258,"column_start":1,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9325,"byte_end":9342,"line_start":259,"line_end":259,"column_start":1,"column_end":18}},{"value":"/ use std::str;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9343,"byte_end":9360,"line_start":260,"line_end":260,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9361,"byte_end":9364,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ named!(multi< Vec<&str> >, many0!( map_res!(tag!( \"abcd\" ), str::from_utf8) ) );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9365,"byte_end":9449,"line_start":262,"line_end":262,"column_start":1,"column_end":85}},{"value":"/ let a = b\"abcdef\";","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9450,"byte_end":9472,"line_start":263,"line_end":263,"column_start":1,"column_end":23}},{"value":"/ let b = b\"abcdabcdef\";","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9473,"byte_end":9499,"line_start":264,"line_end":264,"column_start":1,"column_end":27}},{"value":"/ let c = b\"azerty\";","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9500,"byte_end":9522,"line_start":265,"line_end":265,"column_start":1,"column_end":23}},{"value":"/ assert_eq!(multi(a), Ok((&b\"ef\"[..],     vec![\"abcd\"])));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9523,"byte_end":9584,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(multi(b), Ok((&b\"ef\"[..],     vec![\"abcd\", \"abcd\"])));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9585,"byte_end":9654,"line_start":267,"line_end":267,"column_start":1,"column_end":70}},{"value":"/ assert_eq!(multi(c), Ok((&b\"azerty\"[..], Vec::new())));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9655,"byte_end":9714,"line_start":268,"line_end":268,"column_start":1,"column_end":60}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9715,"byte_end":9722,"line_start":269,"line_end":269,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"alloc\"))]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9723,"byte_end":9759,"line_start":270,"line_end":270,"column_start":1,"column_end":37}},{"value":"/ # fn main() {}","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9760,"byte_end":9778,"line_start":271,"line_end":271,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9779,"byte_end":9786,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9787,"byte_end":9790,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ Here are some basic combining macros available:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9791,"byte_end":9842,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9843,"byte_end":9846,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ - **`opt!`**: will make the parser optional (if it returns the `O` type, the new parser returns `Option<O>`)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9847,"byte_end":9959,"line_start":276,"line_end":276,"column_start":1,"column_end":113}},{"value":"/ - **`many0!`**: will apply the parser 0 or more times (if it returns the `O` type, the new parser returns `Vec<O>`)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":9960,"byte_end":10079,"line_start":277,"line_end":277,"column_start":1,"column_end":120}},{"value":"/ - **`many1!`**: will apply the parser 1 or more times","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10080,"byte_end":10137,"line_start":278,"line_end":278,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10138,"byte_end":10141,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ There are more complex (and more useful) parsers like `do_parse!` and `tuple!`, which are used to apply a series of parsers then assemble their results.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10142,"byte_end":10298,"line_start":280,"line_end":280,"column_start":1,"column_end":157}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10299,"byte_end":10302,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Example with `tuple!`:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10303,"byte_end":10329,"line_start":282,"line_end":282,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10330,"byte_end":10333,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10334,"byte_end":10345,"line_start":284,"line_end":284,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10346,"byte_end":10382,"line_start":285,"line_end":285,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10383,"byte_end":10400,"line_start":286,"line_end":286,"column_start":1,"column_end":18}},{"value":"/ use nom::{ErrorKind, Needed,be_u16};","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10401,"byte_end":10441,"line_start":287,"line_end":287,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10442,"byte_end":10445,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ named!(tpl<&[u8], (u16, &[u8], &[u8]) >,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10446,"byte_end":10490,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/   tuple!(","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10491,"byte_end":10504,"line_start":290,"line_end":290,"column_start":1,"column_end":14}},{"value":"/     be_u16 ,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10505,"byte_end":10521,"line_start":291,"line_end":291,"column_start":1,"column_end":17}},{"value":"/     take!(3),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10522,"byte_end":10539,"line_start":292,"line_end":292,"column_start":1,"column_end":18}},{"value":"/     tag!(\"fg\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10540,"byte_end":10558,"line_start":293,"line_end":293,"column_start":1,"column_end":19}},{"value":"/   )","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10559,"byte_end":10566,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10567,"byte_end":10573,"line_start":295,"line_end":295,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10574,"byte_end":10577,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10578,"byte_end":10593,"line_start":297,"line_end":297,"column_start":1,"column_end":16}},{"value":"/   tpl(&b\"abcdefgh\"[..]),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10594,"byte_end":10622,"line_start":298,"line_end":298,"column_start":1,"column_end":29}},{"value":"/   Ok((","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10623,"byte_end":10633,"line_start":299,"line_end":299,"column_start":1,"column_end":11}},{"value":"/     &b\"h\"[..],","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10634,"byte_end":10652,"line_start":300,"line_end":300,"column_start":1,"column_end":19}},{"value":"/     (0x6162u16, &b\"cde\"[..], &b\"fg\"[..])","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10653,"byte_end":10697,"line_start":301,"line_end":301,"column_start":1,"column_end":45}},{"value":"/   ))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10698,"byte_end":10706,"line_start":302,"line_end":302,"column_start":1,"column_end":9}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10707,"byte_end":10713,"line_start":303,"line_end":303,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(tpl(&b\"abcde\"[..]), Err(nom::Err::Incomplete(Needed::Size(2))));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10714,"byte_end":10793,"line_start":304,"line_end":304,"column_start":1,"column_end":80}},{"value":"/ let input = &b\"abcdejk\"[..];","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10794,"byte_end":10826,"line_start":305,"line_end":305,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(tpl(input), Err(nom::Err::Error(error_position!(&input[5..], ErrorKind::Tag))));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10827,"byte_end":10922,"line_start":306,"line_end":306,"column_start":1,"column_end":96}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10923,"byte_end":10930,"line_start":307,"line_end":307,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10931,"byte_end":10938,"line_start":308,"line_end":308,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10939,"byte_end":10942,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Example with `do_parse!`:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10943,"byte_end":10972,"line_start":310,"line_end":310,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10973,"byte_end":10976,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10977,"byte_end":10988,"line_start":312,"line_end":312,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":10989,"byte_end":11025,"line_start":313,"line_end":313,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11026,"byte_end":11043,"line_start":314,"line_end":314,"column_start":1,"column_end":18}},{"value":"/ use nom::IResult;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11044,"byte_end":11065,"line_start":315,"line_end":315,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11066,"byte_end":11069,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11070,"byte_end":11101,"line_start":317,"line_end":317,"column_start":1,"column_end":32}},{"value":"/ struct A {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11102,"byte_end":11116,"line_start":318,"line_end":318,"column_start":1,"column_end":15}},{"value":"/   a: u8,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11117,"byte_end":11129,"line_start":319,"line_end":319,"column_start":1,"column_end":13}},{"value":"/   b: u8","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11130,"byte_end":11141,"line_start":320,"line_end":320,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11142,"byte_end":11147,"line_start":321,"line_end":321,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11148,"byte_end":11151,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ fn ret_int1(i:&[u8]) -> IResult<&[u8], u8> { Ok((i,1)) }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11152,"byte_end":11212,"line_start":323,"line_end":323,"column_start":1,"column_end":61}},{"value":"/ fn ret_int2(i:&[u8]) -> IResult<&[u8], u8> { Ok((i,2)) }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11213,"byte_end":11273,"line_start":324,"line_end":324,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11274,"byte_end":11277,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ named!(f<&[u8],A>,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11278,"byte_end":11300,"line_start":326,"line_end":326,"column_start":1,"column_end":23}},{"value":"/   do_parse!(    // the parser takes a byte array as input, and returns an A struct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11301,"byte_end":11387,"line_start":327,"line_end":327,"column_start":1,"column_end":87}},{"value":"/     tag!(\"abcd\")       >>      // begins with \"abcd\"","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11388,"byte_end":11444,"line_start":328,"line_end":328,"column_start":1,"column_end":57}},{"value":"/     opt!(tag!(\"abcd\")) >>      // this is an optional parser","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11445,"byte_end":11509,"line_start":329,"line_end":329,"column_start":1,"column_end":65}},{"value":"/     aa: ret_int1       >>      // the return value of ret_int1, if it does not fail, will be stored in aa","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11510,"byte_end":11619,"line_start":330,"line_end":330,"column_start":1,"column_end":110}},{"value":"/     tag!(\"efgh\")       >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11620,"byte_end":11649,"line_start":331,"line_end":331,"column_start":1,"column_end":30}},{"value":"/     bb: ret_int2       >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11650,"byte_end":11679,"line_start":332,"line_end":332,"column_start":1,"column_end":30}},{"value":"/     tag!(\"efgh\")       >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11680,"byte_end":11709,"line_start":333,"line_end":333,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11710,"byte_end":11713,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/     (A{a: aa, b: bb})          // the final tuple will be able to use the variable defined previously","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11714,"byte_end":11819,"line_start":335,"line_end":335,"column_start":1,"column_end":106}},{"value":"/   )","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11820,"byte_end":11827,"line_start":336,"line_end":336,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11828,"byte_end":11834,"line_start":337,"line_end":337,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11835,"byte_end":11838,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ let r = f(b\"abcdabcdefghefghX\");","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11839,"byte_end":11875,"line_start":339,"line_end":339,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(r, Ok((&b\"X\"[..], A{a: 1, b: 2})));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11876,"byte_end":11926,"line_start":340,"line_end":340,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11927,"byte_end":11930,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ let r2 = f(b\"abcdefghefghX\");","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11931,"byte_end":11964,"line_start":342,"line_end":342,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(r2, Ok((&b\"X\"[..], A{a: 1, b: 2})));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":11965,"byte_end":12016,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12017,"byte_end":12024,"line_start":344,"line_end":344,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12025,"byte_end":12032,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12033,"byte_end":12036,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ The double right arrow `>>` is used as separator between every parser in the sequence, and the last closure can see the variables storing the result of parsers. Unless the specified return type is already a tuple, the final line should be that type wrapped in a tuple.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12037,"byte_end":12309,"line_start":347,"line_end":347,"column_start":1,"column_end":273}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12310,"byte_end":12313,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ More examples of [`do_parse!`](macro.do_parse.html) and [`tuple!`](macro.tuple.html) usage can be found in the [INI file parser example](tests/ini.rs).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12314,"byte_end":12469,"line_start":349,"line_end":349,"column_start":1,"column_end":156}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12470,"byte_end":12473,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ **Going further:** read the [guides](https://github.com/Geal/nom/tree/master/doc)!","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":12474,"byte_end":12560,"line_start":351,"line_end":351,"column_start":1,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13217,"byte_end":13220,"line_start":372,"line_end":372,"column_start":9,"column_end":12},"name":"lib","qualname":"::lib","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":5}],"decl_id":null,"docs":" Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does\n it, albeit there it is not public.\n","sig":null,"attributes":[{"value":"/ Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13069,"byte_end":13169,"line_start":370,"line_end":370,"column_start":1,"column_end":101}},{"value":"/ it, albeit there it is not public.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13170,"byte_end":13208,"line_start":371,"line_end":371,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13708,"byte_end":13711,"line_start":388,"line_end":388,"column_start":11,"column_end":14},"name":"std","qualname":"::lib::std","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":52}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13674,"byte_end":13697,"line_start":387,"line_end":387,"column_start":3,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":13847,"byte_end":13854,"line_start":390,"line_end":390,"column_start":13,"column_end":20},"name":"prelude","qualname":"::lib::std::prelude","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":53}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15415,"byte_end":15425,"line_start":16,"line_end":16,"column_start":11,"column_end":21},"name":"HexDisplay","qualname":"::util::HexDisplay","value":"HexDisplay","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15381,"byte_end":15404,"line_start":15,"line_end":15,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15517,"byte_end":15523,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"name":"to_hex","qualname":"::util::HexDisplay::to_hex","value":"pub fn to_hex(&Self, usize) -> String","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump, returning the owned\n string.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a hex dump, returning the owned","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15430,"byte_end":15497,"line_start":17,"line_end":17,"column_start":3,"column_end":70}},{"value":"/ string.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15500,"byte_end":15511,"line_start":18,"line_end":18,"column_start":3,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15679,"byte_end":15690,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"name":"to_hex_from","qualname":"::util::HexDisplay::to_hex_from","value":"pub fn to_hex_from(&Self, usize, usize) -> String","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\n string.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a hex dump beginning at `from` address, returning the owned","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15564,"byte_end":15659,"line_start":21,"line_end":21,"column_start":3,"column_end":98}},{"value":"/ string.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":15662,"byte_end":15673,"line_start":22,"line_end":22,"column_start":3,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":19535,"byte_end":19548,"line_start":185,"line_end":185,"column_start":8,"column_end":21},"name":"error_to_list","qualname":"::util::error_to_list","value":"pub fn error_to_list<P: Clone, E: Clone>(&Context<P, E>)\n-> Vec<(P, ErrorKind<E>)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":19493,"byte_end":19527,"line_start":184,"line_end":184,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":19905,"byte_end":19924,"line_start":201,"line_end":201,"column_start":8,"column_end":27},"name":"compare_error_paths","qualname":"::util::compare_error_paths","value":"pub fn compare_error_paths<P: Clone + PartialEq, E: Clone +\nPartialEq>(&Context<P, E>, &Context<P, E>) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":19863,"byte_end":19897,"line_start":200,"line_end":200,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":115},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":20215,"byte_end":20232,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"add_error_pattern","qualname":"::util::add_error_pattern","value":"pub fn add_error_pattern<'a, I: Clone + Hash + Eq, O, E: Clone + Hash +\nEq>(&mut HashMap<Vec<(I, ErrorKind<E>)>, &'a str>, IResult<I, O, E>, &'a str)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":20149,"byte_end":20172,"line_start":209,"line_end":209,"column_start":1,"column_end":24}},{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":20173,"byte_end":20207,"line_start":210,"line_end":210,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":120},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":20550,"byte_end":20566,"line_start":225,"line_end":225,"column_start":8,"column_end":24},"name":"slice_to_offsets","qualname":"::util::slice_to_offsets","value":"pub fn slice_to_offsets(&[u8], &[u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":121},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":20805,"byte_end":20819,"line_start":234,"line_end":234,"column_start":8,"column_end":22},"name":"prepare_errors","qualname":"::util::prepare_errors","value":"pub fn prepare_errors<O, E: Clone>(&[u8], IResult<&[u8], O, E>)\n-> Option<Vec<(ErrorKind<E>, usize, usize)>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":20739,"byte_end":20762,"line_start":232,"line_end":232,"column_start":1,"column_end":24}},{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":20763,"byte_end":20797,"line_start":233,"line_end":233,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":21506,"byte_end":21517,"line_start":262,"line_end":262,"column_start":8,"column_end":19},"name":"print_error","qualname":"::util::print_error","value":"pub fn print_error<O, E: Clone>(&[u8], IResult<&[u8], O, E>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":21440,"byte_end":21463,"line_start":260,"line_end":260,"column_start":1,"column_end":24}},{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":21464,"byte_end":21498,"line_start":261,"line_end":261,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":21896,"byte_end":21911,"line_start":274,"line_end":274,"column_start":8,"column_end":23},"name":"generate_colors","qualname":"::util::generate_colors","value":"pub fn generate_colors<E>(&[(ErrorKind<E>, usize, usize)]) -> HashMap<u32, u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":21830,"byte_end":21853,"line_start":272,"line_end":272,"column_start":1,"column_end":24}},{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":21854,"byte_end":21888,"line_start":273,"line_end":273,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":22167,"byte_end":22183,"line_start":286,"line_end":286,"column_start":8,"column_end":24},"name":"code_from_offset","qualname":"::util::code_from_offset","value":"pub fn code_from_offset<E>(&[(ErrorKind<E>, usize, usize)], usize)\n-> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":22721,"byte_end":22732,"line_start":308,"line_end":308,"column_start":8,"column_end":19},"name":"reset_color","qualname":"::util::reset_color","value":"pub fn reset_color(&mut Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":22688,"byte_end":22713,"line_start":307,"line_end":307,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":133},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":22849,"byte_end":22860,"line_start":316,"line_end":316,"column_start":8,"column_end":19},"name":"write_color","qualname":"::util::write_color","value":"pub fn write_color(&mut Vec<u8>, u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":22816,"byte_end":22841,"line_start":315,"line_end":315,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":23156,"byte_end":23167,"line_start":329,"line_end":329,"column_start":8,"column_end":19},"name":"print_codes","qualname":"::util::print_codes","value":"pub fn print_codes(&HashMap<u32, u8>, &HashMap<u32, &str>) -> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":23063,"byte_end":23086,"line_start":327,"line_end":327,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":135},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":23782,"byte_end":23795,"line_start":352,"line_end":352,"column_start":8,"column_end":21},"name":"print_offsets","qualname":"::util::print_offsets","value":"pub fn print_offsets<E>(&[u8], usize, &[(ErrorKind<E>, usize, usize)])\n-> String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":23716,"byte_end":23739,"line_start":350,"line_end":350,"column_start":1,"column_end":24}},{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":23740,"byte_end":23774,"line_start":351,"line_end":351,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1299},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26144,"byte_end":26150,"line_start":442,"line_end":442,"column_start":3,"column_end":9},"name":"Custom","qualname":"::util::ErrorKind::Custom","value":"ErrorKind::Custom(E)","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1302},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26157,"byte_end":26160,"line_start":443,"line_end":443,"column_start":3,"column_end":6},"name":"Tag","qualname":"::util::ErrorKind::Tag","value":"ErrorKind::Tag","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1304},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26164,"byte_end":26170,"line_start":444,"line_end":444,"column_start":3,"column_end":9},"name":"MapRes","qualname":"::util::ErrorKind::MapRes","value":"ErrorKind::MapRes","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1306},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26174,"byte_end":26180,"line_start":445,"line_end":445,"column_start":3,"column_end":9},"name":"MapOpt","qualname":"::util::ErrorKind::MapOpt","value":"ErrorKind::MapOpt","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1308},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26184,"byte_end":26187,"line_start":446,"line_end":446,"column_start":3,"column_end":6},"name":"Alt","qualname":"::util::ErrorKind::Alt","value":"ErrorKind::Alt","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1310},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26191,"byte_end":26196,"line_start":447,"line_end":447,"column_start":3,"column_end":8},"name":"IsNot","qualname":"::util::ErrorKind::IsNot","value":"ErrorKind::IsNot","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1312},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26200,"byte_end":26203,"line_start":448,"line_end":448,"column_start":3,"column_end":6},"name":"IsA","qualname":"::util::ErrorKind::IsA","value":"ErrorKind::IsA","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1314},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26207,"byte_end":26220,"line_start":449,"line_end":449,"column_start":3,"column_end":16},"name":"SeparatedList","qualname":"::util::ErrorKind::SeparatedList","value":"ErrorKind::SeparatedList","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1316},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26224,"byte_end":26245,"line_start":450,"line_end":450,"column_start":3,"column_end":24},"name":"SeparatedNonEmptyList","qualname":"::util::ErrorKind::SeparatedNonEmptyList","value":"ErrorKind::SeparatedNonEmptyList","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1318},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26249,"byte_end":26254,"line_start":451,"line_end":451,"column_start":3,"column_end":8},"name":"Many0","qualname":"::util::ErrorKind::Many0","value":"ErrorKind::Many0","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1320},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26258,"byte_end":26263,"line_start":452,"line_end":452,"column_start":3,"column_end":8},"name":"Many1","qualname":"::util::ErrorKind::Many1","value":"ErrorKind::Many1","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1322},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26267,"byte_end":26275,"line_start":453,"line_end":453,"column_start":3,"column_end":11},"name":"ManyTill","qualname":"::util::ErrorKind::ManyTill","value":"ErrorKind::ManyTill","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1324},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26279,"byte_end":26284,"line_start":454,"line_end":454,"column_start":3,"column_end":8},"name":"Count","qualname":"::util::ErrorKind::Count","value":"ErrorKind::Count","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1326},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26288,"byte_end":26307,"line_start":455,"line_end":455,"column_start":3,"column_end":22},"name":"TakeUntilAndConsume","qualname":"::util::ErrorKind::TakeUntilAndConsume","value":"ErrorKind::TakeUntilAndConsume","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1328},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26311,"byte_end":26320,"line_start":456,"line_end":456,"column_start":3,"column_end":12},"name":"TakeUntil","qualname":"::util::ErrorKind::TakeUntil","value":"ErrorKind::TakeUntil","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1330},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26324,"byte_end":26349,"line_start":457,"line_end":457,"column_start":3,"column_end":28},"name":"TakeUntilEitherAndConsume","qualname":"::util::ErrorKind::TakeUntilEitherAndConsume","value":"ErrorKind::TakeUntilEitherAndConsume","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1332},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26353,"byte_end":26368,"line_start":458,"line_end":458,"column_start":3,"column_end":18},"name":"TakeUntilEither","qualname":"::util::ErrorKind::TakeUntilEither","value":"ErrorKind::TakeUntilEither","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1334},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26372,"byte_end":26383,"line_start":459,"line_end":459,"column_start":3,"column_end":14},"name":"LengthValue","qualname":"::util::ErrorKind::LengthValue","value":"ErrorKind::LengthValue","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1336},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26387,"byte_end":26397,"line_start":460,"line_end":460,"column_start":3,"column_end":13},"name":"TagClosure","qualname":"::util::ErrorKind::TagClosure","value":"ErrorKind::TagClosure","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1338},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26401,"byte_end":26406,"line_start":461,"line_end":461,"column_start":3,"column_end":8},"name":"Alpha","qualname":"::util::ErrorKind::Alpha","value":"ErrorKind::Alpha","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1340},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26410,"byte_end":26415,"line_start":462,"line_end":462,"column_start":3,"column_end":8},"name":"Digit","qualname":"::util::ErrorKind::Digit","value":"ErrorKind::Digit","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1342},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26419,"byte_end":26427,"line_start":463,"line_end":463,"column_start":3,"column_end":11},"name":"HexDigit","qualname":"::util::ErrorKind::HexDigit","value":"ErrorKind::HexDigit","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1344},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26431,"byte_end":26439,"line_start":464,"line_end":464,"column_start":3,"column_end":11},"name":"OctDigit","qualname":"::util::ErrorKind::OctDigit","value":"ErrorKind::OctDigit","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1346},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26443,"byte_end":26455,"line_start":465,"line_end":465,"column_start":3,"column_end":15},"name":"AlphaNumeric","qualname":"::util::ErrorKind::AlphaNumeric","value":"ErrorKind::AlphaNumeric","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1348},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26459,"byte_end":26464,"line_start":466,"line_end":466,"column_start":3,"column_end":8},"name":"Space","qualname":"::util::ErrorKind::Space","value":"ErrorKind::Space","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1350},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26468,"byte_end":26478,"line_start":467,"line_end":467,"column_start":3,"column_end":13},"name":"MultiSpace","qualname":"::util::ErrorKind::MultiSpace","value":"ErrorKind::MultiSpace","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1352},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26482,"byte_end":26495,"line_start":468,"line_end":468,"column_start":3,"column_end":16},"name":"LengthValueFn","qualname":"::util::ErrorKind::LengthValueFn","value":"ErrorKind::LengthValueFn","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1354},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26499,"byte_end":26502,"line_start":469,"line_end":469,"column_start":3,"column_end":6},"name":"Eof","qualname":"::util::ErrorKind::Eof","value":"ErrorKind::Eof","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1356},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26506,"byte_end":26513,"line_start":470,"line_end":470,"column_start":3,"column_end":10},"name":"ExprOpt","qualname":"::util::ErrorKind::ExprOpt","value":"ErrorKind::ExprOpt","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1358},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26517,"byte_end":26524,"line_start":471,"line_end":471,"column_start":3,"column_end":10},"name":"ExprRes","qualname":"::util::ErrorKind::ExprRes","value":"ErrorKind::ExprRes","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1360},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26528,"byte_end":26538,"line_start":472,"line_end":472,"column_start":3,"column_end":13},"name":"CondReduce","qualname":"::util::ErrorKind::CondReduce","value":"ErrorKind::CondReduce","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1362},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26542,"byte_end":26548,"line_start":473,"line_end":473,"column_start":3,"column_end":9},"name":"Switch","qualname":"::util::ErrorKind::Switch","value":"ErrorKind::Switch","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1364},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26552,"byte_end":26559,"line_start":474,"line_end":474,"column_start":3,"column_end":10},"name":"TagBits","qualname":"::util::ErrorKind::TagBits","value":"ErrorKind::TagBits","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1366},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26563,"byte_end":26568,"line_start":475,"line_end":475,"column_start":3,"column_end":8},"name":"OneOf","qualname":"::util::ErrorKind::OneOf","value":"ErrorKind::OneOf","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1368},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26572,"byte_end":26578,"line_start":476,"line_end":476,"column_start":3,"column_end":9},"name":"NoneOf","qualname":"::util::ErrorKind::NoneOf","value":"ErrorKind::NoneOf","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1370},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26582,"byte_end":26586,"line_start":477,"line_end":477,"column_start":3,"column_end":7},"name":"Char","qualname":"::util::ErrorKind::Char","value":"ErrorKind::Char","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1372},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26590,"byte_end":26594,"line_start":478,"line_end":478,"column_start":3,"column_end":7},"name":"CrLf","qualname":"::util::ErrorKind::CrLf","value":"ErrorKind::CrLf","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1374},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26598,"byte_end":26609,"line_start":479,"line_end":479,"column_start":3,"column_end":14},"name":"RegexpMatch","qualname":"::util::ErrorKind::RegexpMatch","value":"ErrorKind::RegexpMatch","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1376},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26613,"byte_end":26626,"line_start":480,"line_end":480,"column_start":3,"column_end":16},"name":"RegexpMatches","qualname":"::util::ErrorKind::RegexpMatches","value":"ErrorKind::RegexpMatches","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1378},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26630,"byte_end":26640,"line_start":481,"line_end":481,"column_start":3,"column_end":13},"name":"RegexpFind","qualname":"::util::ErrorKind::RegexpFind","value":"ErrorKind::RegexpFind","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1380},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26644,"byte_end":26657,"line_start":482,"line_end":482,"column_start":3,"column_end":16},"name":"RegexpCapture","qualname":"::util::ErrorKind::RegexpCapture","value":"ErrorKind::RegexpCapture","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1382},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26661,"byte_end":26675,"line_start":483,"line_end":483,"column_start":3,"column_end":17},"name":"RegexpCaptures","qualname":"::util::ErrorKind::RegexpCaptures","value":"ErrorKind::RegexpCaptures","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1384},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26679,"byte_end":26689,"line_start":484,"line_end":484,"column_start":3,"column_end":13},"name":"TakeWhile1","qualname":"::util::ErrorKind::TakeWhile1","value":"ErrorKind::TakeWhile1","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1386},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26693,"byte_end":26701,"line_start":485,"line_end":485,"column_start":3,"column_end":11},"name":"Complete","qualname":"::util::ErrorKind::Complete","value":"ErrorKind::Complete","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1388},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26705,"byte_end":26708,"line_start":486,"line_end":486,"column_start":3,"column_end":6},"name":"Fix","qualname":"::util::ErrorKind::Fix","value":"ErrorKind::Fix","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1390},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26712,"byte_end":26719,"line_start":487,"line_end":487,"column_start":3,"column_end":10},"name":"Escaped","qualname":"::util::ErrorKind::Escaped","value":"ErrorKind::Escaped","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1392},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26723,"byte_end":26739,"line_start":488,"line_end":488,"column_start":3,"column_end":19},"name":"EscapedTransform","qualname":"::util::ErrorKind::EscapedTransform","value":"ErrorKind::EscapedTransform","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1394},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26811,"byte_end":26817,"line_start":490,"line_end":490,"column_start":3,"column_end":9},"name":"TagStr","qualname":"::util::ErrorKind::TagStr","value":"ErrorKind::TagStr","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `Tag` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26743,"byte_end":26808,"line_start":489,"line_end":489,"column_start":3,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1396},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26891,"byte_end":26899,"line_start":492,"line_end":492,"column_start":3,"column_end":11},"name":"IsNotStr","qualname":"::util::ErrorKind::IsNotStr","value":"ErrorKind::IsNotStr","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `IsNot` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26821,"byte_end":26888,"line_start":491,"line_end":491,"column_start":3,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1398},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26971,"byte_end":26977,"line_start":494,"line_end":494,"column_start":3,"column_end":9},"name":"IsAStr","qualname":"::util::ErrorKind::IsAStr","value":"ErrorKind::IsAStr","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `IsA` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26903,"byte_end":26968,"line_start":493,"line_end":493,"column_start":3,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1400},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27056,"byte_end":27069,"line_start":496,"line_end":496,"column_start":3,"column_end":16},"name":"TakeWhile1Str","qualname":"::util::ErrorKind::TakeWhile1Str","value":"ErrorKind::TakeWhile1Str","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `TakeWhile1` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26981,"byte_end":27053,"line_start":495,"line_end":495,"column_start":3,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1402},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27073,"byte_end":27081,"line_start":497,"line_end":497,"column_start":3,"column_end":11},"name":"NonEmpty","qualname":"::util::ErrorKind::NonEmpty","value":"ErrorKind::NonEmpty","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1404},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27085,"byte_end":27091,"line_start":498,"line_end":498,"column_start":3,"column_end":9},"name":"ManyMN","qualname":"::util::ErrorKind::ManyMN","value":"ErrorKind::ManyMN","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1406},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27179,"byte_end":27201,"line_start":500,"line_end":500,"column_start":3,"column_end":25},"name":"TakeUntilAndConsumeStr","qualname":"::util::ErrorKind::TakeUntilAndConsumeStr","value":"ErrorKind::TakeUntilAndConsumeStr","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note =\n\"Please use `TakeUntilAndConsume` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27095,"byte_end":27176,"line_start":499,"line_end":499,"column_start":3,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1408},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27279,"byte_end":27291,"line_start":502,"line_end":502,"column_start":3,"column_end":15},"name":"TakeUntilStr","qualname":"::util::ErrorKind::TakeUntilStr","value":"ErrorKind::TakeUntilStr","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"4.0.0\", note = \"Please use `TakeUntil` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27205,"byte_end":27276,"line_start":501,"line_end":501,"column_start":3,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1410},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27295,"byte_end":27298,"line_start":503,"line_end":503,"column_start":3,"column_end":6},"name":"Not","qualname":"::util::ErrorKind::Not","value":"ErrorKind::Not","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1412},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27302,"byte_end":27313,"line_start":504,"line_end":504,"column_start":3,"column_end":14},"name":"Permutation","qualname":"::util::ErrorKind::Permutation","value":"ErrorKind::Permutation","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1414},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27317,"byte_end":27323,"line_start":505,"line_end":505,"column_start":3,"column_end":9},"name":"Verify","qualname":"::util::ErrorKind::Verify","value":"ErrorKind::Verify","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1416},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27327,"byte_end":27336,"line_start":506,"line_end":506,"column_start":3,"column_end":12},"name":"TakeTill1","qualname":"::util::ErrorKind::TakeTill1","value":"ErrorKind::TakeTill1","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1418},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27340,"byte_end":27360,"line_start":507,"line_end":507,"column_start":3,"column_end":23},"name":"TakeUntilAndConsume1","qualname":"::util::ErrorKind::TakeUntilAndConsume1","value":"ErrorKind::TakeUntilAndConsume1","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1420},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27364,"byte_end":27375,"line_start":508,"line_end":508,"column_start":3,"column_end":14},"name":"TakeWhileMN","qualname":"::util::ErrorKind::TakeWhileMN","value":"ErrorKind::TakeWhileMN","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1422},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27379,"byte_end":27386,"line_start":509,"line_end":509,"column_start":3,"column_end":10},"name":"ParseTo","qualname":"::util::ErrorKind::ParseTo","value":"ErrorKind::ParseTo","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1424},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27390,"byte_end":27398,"line_start":510,"line_end":510,"column_start":3,"column_end":11},"name":"TooLarge","qualname":"::util::ErrorKind::TooLarge","value":"ErrorKind::TooLarge","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1426},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27402,"byte_end":27412,"line_start":511,"line_end":511,"column_start":3,"column_end":13},"name":"Many0Count","qualname":"::util::ErrorKind::Many0Count","value":"ErrorKind::Many0Count","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1428},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27416,"byte_end":27426,"line_start":512,"line_end":512,"column_start":3,"column_end":13},"name":"Many1Count","qualname":"::util::ErrorKind::Many1Count","value":"ErrorKind::Many1Count","parent":{"krate":0,"index":1297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1297},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26121,"byte_end":26130,"line_start":441,"line_end":441,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::util::ErrorKind","value":"pub enum ErrorKind<E = u32> {\n    Custom(E),\n    Tag,\n    MapRes,\n    MapOpt,\n    Alt,\n    IsNot,\n    IsA,\n    SeparatedList,\n    SeparatedNonEmptyList,\n    Many0,\n    Many1,\n    ManyTill,\n    Count,\n    TakeUntilAndConsume,\n    TakeUntil,\n    TakeUntilEitherAndConsume,\n    TakeUntilEither,\n    LengthValue,\n    TagClosure,\n    Alpha,\n    Digit,\n    HexDigit,\n    OctDigit,\n    AlphaNumeric,\n    Space,\n    MultiSpace,\n    LengthValueFn,\n    Eof,\n    ExprOpt,\n    ExprRes,\n    CondReduce,\n    Switch,\n    TagBits,\n    OneOf,\n    NoneOf,\n    Char,\n    CrLf,\n    RegexpMatch,\n    RegexpMatches,\n    RegexpFind,\n    RegexpCapture,\n    RegexpCaptures,\n    TakeWhile1,\n    Complete,\n    Fix,\n    Escaped,\n    EscapedTransform,\n    TagStr,\n    IsNotStr,\n    IsAStr,\n    TakeWhile1Str,\n    NonEmpty,\n    ManyMN,\n    TakeUntilAndConsumeStr,\n    TakeUntilStr,\n    Not,\n    Permutation,\n    Verify,\n    TakeTill1,\n    TakeUntilAndConsume1,\n    TakeWhileMN,\n    ParseTo,\n    TooLarge,\n    Many0Count,\n    Many1Count,\n}","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1302},{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428}],"decl_id":null,"docs":" indicates which parser returned an error\n","sig":null,"attributes":[{"value":"/ indicates which parser returned an error","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":25970,"byte_end":26014,"line_start":437,"line_end":437,"column_start":1,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":26091,"byte_end":26111,"line_start":440,"line_end":440,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":137},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27494,"byte_end":27506,"line_start":517,"line_end":517,"column_start":8,"column_end":20},"name":"error_to_u32","qualname":"::util::error_to_u32","value":"pub fn error_to_u32<E>(&ErrorKind<E>) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":27466,"byte_end":27486,"line_start":516,"line_end":516,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":30759,"byte_end":30770,"line_start":590,"line_end":590,"column_start":10,"column_end":21},"name":"description","qualname":"<ErrorKind<E>>::description","value":"pub fn description(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":30729,"byte_end":30749,"line_start":589,"line_end":589,"column_start":3,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":35122,"byte_end":35137,"line_start":663,"line_end":663,"column_start":10,"column_end":25},"name":"into_error_kind","qualname":"<ErrorKind<E>>::into_error_kind","value":"pub fn into_error_kind(Self) -> ErrorKind<E>","parent":null,"children":[],"decl_id":null,"docs":" Convert Err into an ErrorKind.","sig":null,"attributes":[{"value":"/ Convert Err into an ErrorKind.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":34952,"byte_end":34986,"line_start":660,"line_end":660,"column_start":3,"column_end":37}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":34989,"byte_end":34992,"line_start":661,"line_end":661,"column_start":3,"column_end":6}},{"value":"/ This allows application code to use ErrorKind and stay independent from the `verbose-errors` features activation.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":34995,"byte_end":35112,"line_start":662,"line_end":662,"column_start":3,"column_end":120}}]},{"kind":"Trait","id":{"krate":0,"index":143},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":35188,"byte_end":35195,"line_start":668,"line_end":668,"column_start":11,"column_end":18},"name":"Convert","qualname":"::util::Convert","value":"Convert<T>","parent":null,"children":[{"krate":0,"index":145}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":35206,"byte_end":35213,"line_start":669,"line_end":669,"column_start":6,"column_end":13},"name":"convert","qualname":"::util::Convert::convert","value":"pub fn convert(T) -> Self","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":150},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"verbose_errors","qualname":"::verbose_errors","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":1451},{"krate":0,"index":1461},{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1480},{"krate":0,"index":164},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":176}],"decl_id":null,"docs":" Error management","sig":null,"attributes":[{"value":"cfg(feature = \"verbose-errors\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14525,"byte_end":14559,"line_start":430,"line_end":430,"column_start":1,"column_end":35}},{"value":"macro_use","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14560,"byte_end":14572,"line_start":431,"line_end":431,"column_start":1,"column_end":13}},{"value":"/ Error management","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":39848,"byte_end":39868,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":39869,"byte_end":39872,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Depending on a compilation flag, the content of the `Context` enum","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":39873,"byte_end":39943,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ can change. In the default case, it will only have one variant:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":39944,"byte_end":40011,"line_start":4,"line_end":4,"column_start":1,"column_end":68}},{"value":"/ `Context::Code(I, ErrorKind<E=u32>)` (with `I` and `E` configurable).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40012,"byte_end":40085,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/ It contains an error code and the input position that triggered it.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40086,"byte_end":40157,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40158,"byte_end":40161,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ If you activate the `verbose-errors` compilation flags, it will add another","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40162,"byte_end":40241,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ variant to the enum: `Context::List(Vec<(I, ErrorKind<E>)>)`.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40242,"byte_end":40307,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/ This variant aggregates positions and error codes as the code backtracks","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40308,"byte_end":40384,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ through the nested parsers.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40385,"byte_end":40416,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"/ The verbose errors feature allows for very flexible error management:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40417,"byte_end":40490,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ you can know precisely which parser got to which part of the input.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40491,"byte_end":40562,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/ The main drawback is that it is a lot slower than default error","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40563,"byte_end":40630,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ management.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40631,"byte_end":40646,"line_start":15,"line_end":15,"column_start":1,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1454},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41420,"byte_end":41424,"line_start":32,"line_end":32,"column_start":3,"column_end":7},"name":"Code","qualname":"::verbose_errors::Context::Code","value":"Context::Code(I, ErrorKind<E>)","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":" An error code, represented by an ErrorKind, which can contain a custom error code represented by E\n","sig":null,"attributes":[{"value":"/ An error code, represented by an ErrorKind, which can contain a custom error code represented by E","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41315,"byte_end":41417,"line_start":31,"line_end":31,"column_start":3,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1458},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41445,"byte_end":41449,"line_start":33,"line_end":33,"column_start":3,"column_end":7},"name":"List","qualname":"::verbose_errors::Context::List","value":"Context::List(Vec<(I, ErrorKind<E>)>)","parent":{"krate":0,"index":1451},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1451},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41291,"byte_end":41298,"line_start":30,"line_end":30,"column_start":10,"column_end":17},"name":"Context","qualname":"::verbose_errors::Context","value":"pub enum Context<I, E = u32> {\n    Code(I, ErrorKind<E>),\n    List(Vec<(I, ErrorKind<E>)>),\n}","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1458}],"decl_id":null,"docs":" Contains the error that a parser can return","sig":null,"attributes":[{"value":"/ Contains the error that a parser can return","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40759,"byte_end":40806,"line_start":21,"line_end":21,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40807,"byte_end":40810,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ If you use the `verbose-errors` compilation feature,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40811,"byte_end":40867,"line_start":23,"line_end":23,"column_start":1,"column_end":57}},{"value":"/ `nom::Err` will be the enum defined here,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40868,"byte_end":40913,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"/ otherwise, it will amount to a `ErrorKind<E=u32>`.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40914,"byte_end":40968,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40969,"byte_end":40972,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ It can represent a linked list of errors, indicating the path taken in the parsing tree, with corresponding position in the input data.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":40973,"byte_end":41112,"line_start":27,"line_end":27,"column_start":1,"column_end":140}},{"value":"/ It depends on P, the input position (for a &[u8] parser, it would be a &[u8]), and E, the custom error type (by default, u32)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41113,"byte_end":41242,"line_start":28,"line_end":28,"column_start":1,"column_end":130}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":42050,"byte_end":42065,"line_start":53,"line_end":53,"column_start":10,"column_end":25},"name":"into_error_kind","qualname":"<Context<I, E>>::into_error_kind","value":"pub fn into_error_kind(Self) -> ErrorKind<E>","parent":null,"children":[],"decl_id":null,"docs":" Convert Err into ErrorKind.","sig":null,"attributes":[{"value":"/ Convert Err into ErrorKind.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41885,"byte_end":41916,"line_start":50,"line_end":50,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41919,"byte_end":41922,"line_start":51,"line_end":51,"column_start":3,"column_end":6}},{"value":"/ This allows application code to use ErrorKind and stay independent from the verbose-errors features activation.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41925,"byte_end":42040,"line_start":52,"line_end":52,"column_start":3,"column_end":118}}]},{"kind":"Type","id":{"krate":0,"index":182},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48998,"byte_end":49005,"line_start":18,"line_end":18,"column_start":10,"column_end":17},"name":"IResult","qualname":"::internal::IResult","value":"Result<(I, O), Err<I, E>>","parent":null,"children":[],"decl_id":null,"docs":" Holds the result of parsing functions","sig":null,"attributes":[{"value":"/ Holds the result of parsing functions","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48650,"byte_end":48691,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48692,"byte_end":48695,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ It depends on I, the input type, O, the output type, and E, the error type (by default u32)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48696,"byte_end":48791,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48792,"byte_end":48795,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `Ok` side is an enum containing the remainder of the input (the part of the data that","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48796,"byte_end":48889,"line_start":15,"line_end":15,"column_start":1,"column_end":94}},{"value":"/ was not parsed) and the produced value. The `Err` side contains an instance of `nom::Err`.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48890,"byte_end":48984,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":48985,"byte_end":48988,"line_start":17,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1485},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49241,"byte_end":49248,"line_start":24,"line_end":24,"column_start":3,"column_end":10},"name":"Unknown","qualname":"::internal::Needed::Unknown","value":"Needed::Unknown","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" needs more data, but we do not know how much\n","sig":null,"attributes":[{"value":"/ needs more data, but we do not know how much","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49190,"byte_end":49238,"line_start":23,"line_end":23,"column_start":3,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1487},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49290,"byte_end":49294,"line_start":26,"line_end":26,"column_start":3,"column_end":7},"name":"Size","qualname":"::internal::Needed::Size","value":"Needed::Size(usize)","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" contains the required data size\n","sig":null,"attributes":[{"value":"/ contains the required data size","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49252,"byte_end":49287,"line_start":25,"line_end":25,"column_start":3,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":1484},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49179,"byte_end":49185,"line_start":22,"line_end":22,"column_start":10,"column_end":16},"name":"Needed","qualname":"::internal::Needed","value":"pub enum Needed { Unknown, Size(usize), }","parent":null,"children":[{"krate":0,"index":1485},{"krate":0,"index":1487}],"decl_id":null,"docs":" Contains information on needed data if a parser returned `Incomplete`\n","sig":null,"attributes":[{"value":"/ Contains information on needed data if a parser returned `Incomplete`","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49051,"byte_end":49124,"line_start":20,"line_end":20,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49329,"byte_end":49337,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"name":"is_known","qualname":"<Needed>::is_known","value":"pub fn is_known(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49487,"byte_end":49490,"line_start":36,"line_end":36,"column_start":10,"column_end":13},"name":"map","qualname":"<Needed>::map","value":"pub fn map<F: FnOnce(usize) -> usize>(Self, F) -> Needed","parent":null,"children":[],"decl_id":null,"docs":" Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.\n","sig":null,"attributes":[{"value":"/ Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49383,"byte_end":49465,"line_start":34,"line_end":34,"column_start":3,"column_end":85}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49468,"byte_end":49477,"line_start":35,"line_end":35,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1505},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51299,"byte_end":51309,"line_start":74,"line_end":74,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::internal::Err::Incomplete","value":"Err::Incomplete(Needed)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" There was not enough data\n","sig":null,"attributes":[{"value":"/ There was not enough data","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51267,"byte_end":51296,"line_start":73,"line_end":73,"column_start":3,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1508},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51365,"byte_end":51370,"line_start":76,"line_end":76,"column_start":3,"column_end":8},"name":"Error","qualname":"::internal::Err::Error","value":"Err::Error(Context<I, E>)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" The parser had an error (recoverable)\n","sig":null,"attributes":[{"value":"/ The parser had an error (recoverable)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51321,"byte_end":51362,"line_start":75,"line_end":75,"column_start":3,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1511},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51545,"byte_end":51552,"line_start":80,"line_end":80,"column_start":3,"column_end":10},"name":"Failure","qualname":"::internal::Err::Failure","value":"Err::Failure(Context<I, E>)","parent":{"krate":0,"index":1502},"children":[],"decl_id":null,"docs":" The parser had an unrecoverable error: we got to the right\n branch and we know other branches won't work, so backtrack\n as fast as possible\n","sig":null,"attributes":[{"value":"/ The parser had an unrecoverable error: we got to the right","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51389,"byte_end":51451,"line_start":77,"line_end":77,"column_start":3,"column_end":65}},{"value":"/ branch and we know other branches won't work, so backtrack","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51454,"byte_end":51516,"line_start":78,"line_end":78,"column_start":3,"column_end":65}},{"value":"/ as fast as possible","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51519,"byte_end":51542,"line_start":79,"line_end":79,"column_start":3,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":1502},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51247,"byte_end":51250,"line_start":72,"line_end":72,"column_start":10,"column_end":13},"name":"Err","qualname":"::internal::Err","value":"pub enum Err<I, E = u32> {\n    Incomplete(Needed),\n    Error(Context<I, E>),\n    Failure(Context<I, E>),\n}","parent":null,"children":[{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":1511}],"decl_id":null,"docs":" The `Err` enum indicates the parser was not successful","sig":null,"attributes":[{"value":"/ The `Err` enum indicates the parser was not successful","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49627,"byte_end":49685,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49686,"byte_end":49689,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It has three cases:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49690,"byte_end":49713,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49714,"byte_end":49717,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ * `Incomplete` indicates that more data is needed to decide. The `Needed` enum","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49718,"byte_end":49800,"line_start":48,"line_end":48,"column_start":1,"column_end":83}},{"value":"/ can contain how many additional bytes are necessary. If you are sure your parser","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49801,"byte_end":49885,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"/ is working on full data, you can wrap your parser with the `complete` combinator","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49886,"byte_end":49970,"line_start":50,"line_end":50,"column_start":1,"column_end":85}},{"value":"/ to transform that case in `Error`","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49971,"byte_end":50008,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ * `Error` means some parser did not succeed, but another one might (as an example,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50009,"byte_end":50095,"line_start":52,"line_end":52,"column_start":1,"column_end":87}},{"value":"/ when testing different branches of an `alt` combinator)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50096,"byte_end":50155,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ * `Failure` indicates an unrecoverable error. As an example, if you recognize a prefix","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50156,"byte_end":50246,"line_start":54,"line_end":54,"column_start":1,"column_end":91}},{"value":"/ to decide on the next parser to apply, and that parser fails, you know there's no need","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50247,"byte_end":50337,"line_start":55,"line_end":55,"column_start":1,"column_end":91}},{"value":"/ to try other parsers, you were already in the right branch, so the data is invalid","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50338,"byte_end":50424,"line_start":56,"line_end":56,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50425,"byte_end":50428,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Depending on a compilation flag, the content of the `Context` enum","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50429,"byte_end":50499,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ can change. In the default case, it will only have one variant:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50500,"byte_end":50567,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ `Context::Code(I, ErrorKind<E=u32>)` (with `I` and `E` configurable).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50568,"byte_end":50641,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/ It contains an error code and the input position that triggered it.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50642,"byte_end":50713,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50714,"byte_end":50717,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ If you activate the `verbose-errors` compilation flags, it will add another","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50718,"byte_end":50797,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ variant to the enum: `Context::List(Vec<(I, ErrorKind<E>)>)`.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50798,"byte_end":50863,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/ This variant aggregates positions and error codes as the code backtracks","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50864,"byte_end":50940,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ through the nested parsers.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50941,"byte_end":50972,"line_start":66,"line_end":66,"column_start":1,"column_end":32}},{"value":"/ The verbose errors feature allows for very flexible error management:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":50973,"byte_end":51046,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ you can know precisely which parser got to which part of the input.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51047,"byte_end":51118,"line_start":68,"line_end":68,"column_start":1,"column_end":72}},{"value":"/ The main drawback is that it is a lot slower than default error","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51119,"byte_end":51186,"line_start":69,"line_end":69,"column_start":1,"column_end":68}},{"value":"/ management.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51187,"byte_end":51202,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":52742,"byte_end":52757,"line_start":133,"line_end":133,"column_start":10,"column_end":25},"name":"into_error_kind","qualname":"<Err<I, E>>::into_error_kind","value":"pub fn into_error_kind(Self) -> ::util::ErrorKind<E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":52974,"byte_end":52987,"line_start":141,"line_end":141,"column_start":10,"column_end":23},"name":"is_incomplete","qualname":"<Err<I, E>>::is_incomplete","value":"pub fn is_incomplete(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":281},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":63772,"byte_end":63783,"line_start":28,"line_end":28,"column_start":11,"column_end":22},"name":"InputLength","qualname":"::traits::InputLength","value":"InputLength","parent":null,"children":[{"krate":0,"index":282}],"decl_id":null,"docs":" abstract method to calculate the input length\n","sig":null,"attributes":[{"value":"/ abstract method to calculate the input length","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":63712,"byte_end":63761,"line_start":27,"line_end":27,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":63903,"byte_end":63912,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"name":"input_len","qualname":"::traits::InputLength::input_len","value":"pub fn input_len(&Self) -> usize","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" calculates the input length, as indicated by its name,\n and the name of the trait itself\n","sig":null,"attributes":[{"value":"/ calculates the input length, as indicated by its name,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":63788,"byte_end":63846,"line_start":29,"line_end":29,"column_start":3,"column_end":61}},{"value":"/ and the name of the trait itself","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":63849,"byte_end":63885,"line_start":30,"line_end":30,"column_start":3,"column_end":39}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":63888,"byte_end":63897,"line_start":31,"line_end":31,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":293},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":64487,"byte_end":64493,"line_start":59,"line_end":59,"column_start":11,"column_end":17},"name":"Offset","qualname":"::traits::Offset","value":"Offset","parent":null,"children":[{"krate":0,"index":294}],"decl_id":null,"docs":" useful functions to calculate the offset between slices and show a hexdump of a slice\n","sig":null,"attributes":[{"value":"/ useful functions to calculate the offset between slices and show a hexdump of a slice","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":64387,"byte_end":64476,"line_start":58,"line_end":58,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":64580,"byte_end":64586,"line_start":61,"line_end":61,"column_start":6,"column_end":12},"name":"offset","qualname":"::traits::Offset::offset","value":"pub fn offset(&Self, &Self) -> usize","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" offset between the first byte of self and the first byte of the argument\n","sig":null,"attributes":[{"value":"/ offset between the first byte of self and the first byte of the argument","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":64498,"byte_end":64574,"line_start":60,"line_end":60,"column_start":3,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":305},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":65359,"byte_end":65366,"line_start":101,"line_end":101,"column_start":11,"column_end":18},"name":"AsBytes","qualname":"::traits::AsBytes","value":"AsBytes","parent":null,"children":[{"krate":0,"index":306}],"decl_id":null,"docs":" casts the input type to a byte slice\n","sig":null,"attributes":[{"value":"/ casts the input type to a byte slice","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":65308,"byte_end":65348,"line_start":100,"line_end":100,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":65374,"byte_end":65382,"line_start":102,"line_end":102,"column_start":6,"column_end":14},"name":"as_bytes","qualname":"::traits::AsBytes::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":318},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66388,"byte_end":66394,"line_start":161,"line_end":161,"column_start":11,"column_end":17},"name":"AsChar","qualname":"::traits::AsChar","value":"AsChar","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325}],"decl_id":null,"docs":" transforms common types to a char for basic token parsing\n","sig":null,"attributes":[{"value":"/ transforms common types to a char for basic token parsing","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66316,"byte_end":66377,"line_start":160,"line_end":160,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66443,"byte_end":66450,"line_start":164,"line_end":164,"column_start":6,"column_end":13},"name":"as_char","qualname":"::traits::AsChar::as_char","value":"pub fn as_char(Self) -> char","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" makes a char from self\n","sig":null,"attributes":[{"value":"/ makes a char from self","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66399,"byte_end":66425,"line_start":162,"line_end":162,"column_start":3,"column_end":29}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66428,"byte_end":66437,"line_start":163,"line_end":163,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66639,"byte_end":66647,"line_start":171,"line_end":171,"column_start":6,"column_end":14},"name":"is_alpha","qualname":"::traits::AsChar::is_alpha","value":"pub fn is_alpha(Self) -> bool","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character","sig":null,"attributes":[{"value":"/ tests that self is an alphabetic character","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66469,"byte_end":66515,"line_start":166,"line_end":166,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66518,"byte_end":66521,"line_start":167,"line_end":167,"column_start":3,"column_end":6}},{"value":"/ warning: for `&str` it recognizes alphabetic","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66524,"byte_end":66572,"line_start":168,"line_end":168,"column_start":3,"column_end":51}},{"value":"/ characters outside of the 52 ASCII letters","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66575,"byte_end":66621,"line_start":169,"line_end":169,"column_start":3,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66624,"byte_end":66633,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66755,"byte_end":66766,"line_start":176,"line_end":176,"column_start":6,"column_end":17},"name":"is_alphanum","qualname":"::traits::AsChar::is_alphanum","value":"pub fn is_alphanum(Self) -> bool","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" tests that self is an alphabetic character\n or a decimal digit\n","sig":null,"attributes":[{"value":"/ tests that self is an alphabetic character","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66666,"byte_end":66712,"line_start":173,"line_end":173,"column_start":3,"column_end":49}},{"value":"/ or a decimal digit","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66715,"byte_end":66737,"line_start":174,"line_end":174,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66740,"byte_end":66749,"line_start":175,"line_end":175,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66840,"byte_end":66852,"line_start":179,"line_end":179,"column_start":6,"column_end":18},"name":"is_dec_digit","qualname":"::traits::AsChar::is_dec_digit","value":"pub fn is_dec_digit(Self) -> bool","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" tests that self is a decimal digit\n","sig":null,"attributes":[{"value":"/ tests that self is a decimal digit","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66784,"byte_end":66822,"line_start":177,"line_end":177,"column_start":3,"column_end":41}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66825,"byte_end":66834,"line_start":178,"line_end":178,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66923,"byte_end":66935,"line_start":182,"line_end":182,"column_start":6,"column_end":18},"name":"is_hex_digit","qualname":"::traits::AsChar::is_hex_digit","value":"pub fn is_hex_digit(Self) -> bool","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" tests that self is an hex digit\n","sig":null,"attributes":[{"value":"/ tests that self is an hex digit","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66870,"byte_end":66905,"line_start":180,"line_end":180,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66908,"byte_end":66917,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":67008,"byte_end":67020,"line_start":185,"line_end":185,"column_start":6,"column_end":18},"name":"is_oct_digit","qualname":"::traits::AsChar::is_oct_digit","value":"pub fn is_oct_digit(Self) -> bool","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" tests that self is an octal digit\n","sig":null,"attributes":[{"value":"/ tests that self is an octal digit","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66953,"byte_end":66990,"line_start":183,"line_end":183,"column_start":3,"column_end":40}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":66993,"byte_end":67002,"line_start":184,"line_end":184,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":67090,"byte_end":67093,"line_start":188,"line_end":188,"column_start":6,"column_end":9},"name":"len","qualname":"::traits::AsChar::len","value":"pub fn len(Self) -> usize","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" gets the len in bytes for self\n","sig":null,"attributes":[{"value":"/ gets the len in bytes for self","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":67038,"byte_end":67072,"line_start":186,"line_end":186,"column_start":3,"column_end":37}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":67075,"byte_end":67084,"line_start":187,"line_end":187,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":69963,"byte_end":69972,"line_start":326,"line_end":326,"column_start":11,"column_end":20},"name":"InputIter","qualname":"::traits::InputIter","value":"InputIter","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":369}],"decl_id":null,"docs":" abstracts common iteration operations on the input type","sig":null,"attributes":[{"value":"/ abstracts common iteration operations on the input type","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":69791,"byte_end":69850,"line_start":322,"line_end":322,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":69851,"byte_end":69854,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ it needs a distinction between `Item` and `RawItem` because","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":69855,"byte_end":69918,"line_start":324,"line_end":324,"column_start":1,"column_end":64}},{"value":"/ `&[T]` iterates on references","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":69919,"byte_end":69952,"line_start":325,"line_end":325,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":361},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":69982,"byte_end":69986,"line_start":327,"line_end":327,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputIter::Item","value":"type Item;","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":362},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":69995,"byte_end":70002,"line_start":328,"line_end":328,"column_start":8,"column_end":15},"name":"RawItem","qualname":"::traits::InputIter::RawItem","value":"type RawItem;","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":363},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70011,"byte_end":70015,"line_start":329,"line_end":329,"column_start":8,"column_end":12},"name":"Iter","qualname":"::traits::InputIter::Iter","value":"type Iter: Iterator<Item = (usize, Self::Item)>;","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":364},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70062,"byte_end":70070,"line_start":330,"line_end":330,"column_start":8,"column_end":16},"name":"IterElem","qualname":"::traits::InputIter::IterElem","value":"type IterElem: Iterator<Item = Self::Item>;","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70174,"byte_end":70186,"line_start":333,"line_end":333,"column_start":6,"column_end":18},"name":"iter_indices","qualname":"::traits::InputIter::iter_indices","value":"pub fn iter_indices(&Self) -> Self::Iter","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" returns an iterator over the elements and their byte offsets\n","sig":null,"attributes":[{"value":"/ returns an iterator over the elements and their byte offsets","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70104,"byte_end":70168,"line_start":332,"line_end":332,"column_start":3,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70258,"byte_end":70271,"line_start":335,"line_end":335,"column_start":6,"column_end":19},"name":"iter_elements","qualname":"::traits::InputIter::iter_elements","value":"pub fn iter_elements(&Self) -> Self::IterElem","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" returns an iterator over the elements\n","sig":null,"attributes":[{"value":"/ returns an iterator over the elements","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70211,"byte_end":70252,"line_start":334,"line_end":334,"column_start":3,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70348,"byte_end":70356,"line_start":337,"line_end":337,"column_start":6,"column_end":14},"name":"position","qualname":"::traits::InputIter::position","value":"pub fn position<P>(&Self, P) -> Option<usize> where P: Fn(Self::RawItem) ->\nbool","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" finds the byte position of the element\n","sig":null,"attributes":[{"value":"/ finds the byte position of the element","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70300,"byte_end":70342,"line_start":336,"line_end":336,"column_start":3,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70513,"byte_end":70524,"line_start":341,"line_end":341,"column_start":6,"column_end":17},"name":"slice_index","qualname":"::traits::InputIter::slice_index","value":"pub fn slice_index(&Self, usize) -> Option<usize>","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" get the byte offset from the element's position in the stream\n","sig":null,"attributes":[{"value":"/ get the byte offset from the element's position in the stream","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70442,"byte_end":70507,"line_start":340,"line_end":340,"column_start":3,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":370},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70610,"byte_end":70619,"line_start":345,"line_end":345,"column_start":11,"column_end":20},"name":"InputTake","qualname":"::traits::InputTake","value":"InputTake: Sized","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"decl_id":null,"docs":" abstracts slicing operations\n","sig":null,"attributes":[{"value":"/ abstracts slicing operations","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70567,"byte_end":70599,"line_start":344,"line_end":344,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70699,"byte_end":70703,"line_start":347,"line_end":347,"column_start":6,"column_end":10},"name":"take","qualname":"::traits::InputTake::take","value":"pub fn take(&Self, usize) -> Self","parent":{"krate":0,"index":370},"children":[],"decl_id":null,"docs":" returns a slice of `count` bytes. panics if count > length\n","sig":null,"attributes":[{"value":"/ returns a slice of `count` bytes. panics if count > length","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70631,"byte_end":70693,"line_start":346,"line_end":346,"column_start":3,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70815,"byte_end":70825,"line_start":349,"line_end":349,"column_start":6,"column_end":16},"name":"take_split","qualname":"::traits::InputTake::take_split","value":"pub fn take_split(&Self, usize) -> (Self, Self)","parent":{"krate":0,"index":370},"children":[],"decl_id":null,"docs":" split the stream at the `count` byte offset. panics if count > length\n","sig":null,"attributes":[{"value":"/ split the stream at the `count` byte offset. panics if count > length","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70736,"byte_end":70809,"line_start":348,"line_end":348,"column_start":3,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":405},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73421,"byte_end":73439,"line_start":461,"line_end":461,"column_start":11,"column_end":29},"name":"UnspecializedInput","qualname":"::traits::UnspecializedInput","value":"UnspecializedInput","parent":null,"children":[],"decl_id":null,"docs":" Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).","sig":null,"attributes":[{"value":"/ Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":72875,"byte_end":72972,"line_start":452,"line_end":452,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":72973,"byte_end":72976,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ When implementing a custom input type, it is possible to use directly the","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":72977,"byte_end":73054,"line_start":454,"line_end":454,"column_start":1,"column_end":78}},{"value":"/ default implementation: if the input type implements `InputLength`, `InputIter`,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73055,"byte_end":73139,"line_start":455,"line_end":455,"column_start":1,"column_end":85}},{"value":"/ `InputTake`, `AtEof` and `Clone`, you can implement `UnspecializedInput` and get","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73140,"byte_end":73224,"line_start":456,"line_end":456,"column_start":1,"column_end":85}},{"value":"/ a default version of `InputTakeAtPosition`.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73225,"byte_end":73272,"line_start":457,"line_end":457,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73273,"byte_end":73276,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ For performance reasons, you might want to write a custom implementation of","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73277,"byte_end":73356,"line_start":459,"line_end":459,"column_start":1,"column_end":80}},{"value":"/ `InputTakeAtPosition` (like the one for `&[u8]`).","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73357,"byte_end":73410,"line_start":460,"line_end":460,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":412},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73691,"byte_end":73710,"line_start":469,"line_end":469,"column_start":11,"column_end":30},"name":"InputTakeAtPosition","qualname":"::traits::InputTakeAtPosition","value":"InputTakeAtPosition: Sized","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":416}],"decl_id":null,"docs":" methods to take as much input as possible until the provided function returns true for the current element","sig":null,"attributes":[{"value":"/ methods to take as much input as possible until the provided function returns true for the current element","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73499,"byte_end":73609,"line_start":466,"line_end":466,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73610,"byte_end":73613,"line_start":467,"line_end":467,"column_start":1,"column_end":4}},{"value":"/ a large part of nom's basic parsers are built using this trait","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73614,"byte_end":73680,"line_start":468,"line_end":468,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":413},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73727,"byte_end":73731,"line_start":470,"line_end":470,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::InputTakeAtPosition::Item","value":"type Item;","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73739,"byte_end":73756,"line_start":472,"line_end":472,"column_start":6,"column_end":23},"name":"split_at_position","qualname":"::traits::InputTakeAtPosition::split_at_position","value":"pub fn split_at_position<P>(&Self, P) -> IResult<Self, Self, u32> where\nP: Fn(Self::Item) -> bool","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73853,"byte_end":73871,"line_start":475,"line_end":475,"column_start":6,"column_end":24},"name":"split_at_position1","qualname":"::traits::InputTakeAtPosition::split_at_position1","value":"pub fn split_at_position1<P>(&Self, P, ErrorKind<u32>)\n-> IResult<Self, Self, u32> where P: Fn(Self::Item) -> bool","parent":{"krate":0,"index":412},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1762},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79010,"byte_end":79012,"line_start":653,"line_end":653,"column_start":3,"column_end":5},"name":"Ok","qualname":"::traits::CompareResult::Ok","value":"CompareResult::Ok","parent":{"krate":0,"index":1761},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1764},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79016,"byte_end":79026,"line_start":654,"line_end":654,"column_start":3,"column_end":13},"name":"Incomplete","qualname":"::traits::CompareResult::Incomplete","value":"CompareResult::Incomplete","parent":{"krate":0,"index":1761},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1766},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79030,"byte_end":79035,"line_start":655,"line_end":655,"column_start":3,"column_end":8},"name":"Error","qualname":"::traits::CompareResult::Error","value":"CompareResult::Error","parent":{"krate":0,"index":1761},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1761},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":78992,"byte_end":79005,"line_start":652,"line_end":652,"column_start":10,"column_end":23},"name":"CompareResult","qualname":"::traits::CompareResult","value":"pub enum CompareResult { Ok, Incomplete, Error, }","parent":null,"children":[{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766}],"decl_id":null,"docs":" indicates wether a comparison was successful, an error, or\n if more data was needed\n","sig":null,"attributes":[{"value":"/ indicates wether a comparison was successful, an error, or","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":78864,"byte_end":78926,"line_start":649,"line_end":649,"column_start":1,"column_end":63}},{"value":"/ if more data was needed","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":78927,"byte_end":78954,"line_start":650,"line_end":650,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":461},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79086,"byte_end":79093,"line_start":659,"line_end":659,"column_start":11,"column_end":18},"name":"Compare","qualname":"::traits::Compare","value":"Compare<T>","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" abstracts comparison operations\n","sig":null,"attributes":[{"value":"/ abstracts comparison operations","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79040,"byte_end":79075,"line_start":658,"line_end":658,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79154,"byte_end":79161,"line_start":661,"line_end":661,"column_start":6,"column_end":13},"name":"compare","qualname":"::traits::Compare::compare","value":"pub fn compare(&Self, T) -> CompareResult","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n","sig":null,"attributes":[{"value":"/ compares self to another value for equality","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79101,"byte_end":79148,"line_start":660,"line_end":660,"column_start":3,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79465,"byte_end":79480,"line_start":669,"line_end":669,"column_start":6,"column_end":21},"name":"compare_no_case","qualname":"::traits::Compare::compare_no_case","value":"pub fn compare_no_case(&Self, T) -> CompareResult","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" compares self to another value for equality\n independently of the case.","sig":null,"attributes":[{"value":"/ compares self to another value for equality","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79195,"byte_end":79242,"line_start":662,"line_end":662,"column_start":3,"column_end":50}},{"value":"/ independently of the case.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79245,"byte_end":79275,"line_start":663,"line_end":663,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79278,"byte_end":79281,"line_start":664,"line_end":664,"column_start":3,"column_end":6}},{"value":"/ warning: for `&str`, the comparison is done","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79284,"byte_end":79331,"line_start":665,"line_end":665,"column_start":3,"column_end":50}},{"value":"/ by lowercasing both strings and comparing","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79334,"byte_end":79379,"line_start":666,"line_end":666,"column_start":3,"column_end":48}},{"value":"/ the result. This is a temporary solution until","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79382,"byte_end":79432,"line_start":667,"line_end":667,"column_start":3,"column_end":53}},{"value":"/ a better one appears","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":79435,"byte_end":79459,"line_start":668,"line_end":668,"column_start":3,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":485},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":82337,"byte_end":82346,"line_start":784,"line_end":784,"column_start":11,"column_end":20},"name":"FindToken","qualname":"::traits::FindToken","value":"FindToken<T>","parent":null,"children":[{"krate":0,"index":487}],"decl_id":null,"docs":" look for self in the given input stream\n","sig":null,"attributes":[{"value":"/ look for self in the given input stream","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":82283,"byte_end":82326,"line_start":783,"line_end":783,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":82357,"byte_end":82367,"line_start":785,"line_end":785,"column_start":6,"column_end":16},"name":"find_token","qualname":"::traits::FindToken::find_token","value":"pub fn find_token(&Self, T) -> bool","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":508},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":83301,"byte_end":83314,"line_start":830,"line_end":830,"column_start":11,"column_end":24},"name":"FindSubstring","qualname":"::traits::FindSubstring","value":"FindSubstring<T>","parent":null,"children":[{"krate":0,"index":510}],"decl_id":null,"docs":" look for a substring in self\n","sig":null,"attributes":[{"value":"/ look for a substring in self","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":83258,"byte_end":83290,"line_start":829,"line_end":829,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":83325,"byte_end":83339,"line_start":831,"line_end":831,"column_start":6,"column_end":20},"name":"find_substring","qualname":"::traits::FindSubstring::find_substring","value":"pub fn find_substring(&Self, T) -> Option<usize>","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":523},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":84669,"byte_end":84676,"line_start":885,"line_end":885,"column_start":11,"column_end":18},"name":"ParseTo","qualname":"::traits::ParseTo","value":"ParseTo<R>","parent":null,"children":[{"krate":0,"index":525}],"decl_id":null,"docs":" used to integrate str's parse() method\n","sig":null,"attributes":[{"value":"/ used to integrate str's parse() method","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":84616,"byte_end":84658,"line_start":884,"line_end":884,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":84687,"byte_end":84695,"line_start":886,"line_end":886,"column_start":6,"column_end":14},"name":"parse_to","qualname":"::traits::ParseTo::parse_to","value":"pub fn parse_to(&Self) -> Option<R>","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":535},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":85140,"byte_end":85145,"line_start":906,"line_end":906,"column_start":11,"column_end":16},"name":"Slice","qualname":"::traits::Slice","value":"Slice<R>","parent":null,"children":[{"krate":0,"index":537}],"decl_id":null,"docs":" slicing operations using ranges","sig":null,"attributes":[{"value":"/ slicing operations using ranges","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":84975,"byte_end":85010,"line_start":901,"line_end":901,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":85011,"byte_end":85014,"line_start":902,"line_end":902,"column_start":1,"column_end":4}},{"value":"/ this trait is loosely based on","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":85015,"byte_end":85049,"line_start":903,"line_end":903,"column_start":1,"column_end":35}},{"value":"/ `Index`, but can actually return","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":85050,"byte_end":85086,"line_start":904,"line_end":904,"column_start":1,"column_end":37}},{"value":"/ something else than a `&[T]` or `&str`","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":85087,"byte_end":85129,"line_start":905,"line_end":905,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":85176,"byte_end":85181,"line_start":908,"line_end":908,"column_start":6,"column_end":11},"name":"slice","qualname":"::traits::Slice::slice","value":"pub fn slice(&Self, R) -> Self","parent":{"krate":0,"index":535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":85153,"byte_end":85170,"line_start":907,"line_end":907,"column_start":3,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":541},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86868,"byte_end":86873,"line_start":961,"line_end":961,"column_start":11,"column_end":16},"name":"AtEof","qualname":"::traits::AtEof","value":"AtEof","parent":null,"children":[{"krate":0,"index":542}],"decl_id":null,"docs":" indicates whether more data can come later in input","sig":null,"attributes":[{"value":"/ indicates whether more data can come later in input","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86260,"byte_end":86315,"line_start":950,"line_end":950,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86316,"byte_end":86319,"line_start":951,"line_end":951,"column_start":1,"column_end":4}},{"value":"/ When working with complete data, like a file that was entirely loaded","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86320,"byte_end":86393,"line_start":952,"line_end":952,"column_start":1,"column_end":74}},{"value":"/ in memory, you should use input types like `CompleteByteSlice` and","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86394,"byte_end":86464,"line_start":953,"line_end":953,"column_start":1,"column_end":71}},{"value":"/ `CompleteStr` to wrap the data.  The `at_eof` method of those types","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86465,"byte_end":86536,"line_start":954,"line_end":954,"column_start":1,"column_end":72}},{"value":"/ always returns true, thus indicating to nom that it should not handle","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86537,"byte_end":86610,"line_start":955,"line_end":955,"column_start":1,"column_end":74}},{"value":"/ partial data cases.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86611,"byte_end":86634,"line_start":956,"line_end":956,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86635,"byte_end":86638,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ When working will partial data, like data coming from the network in","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86639,"byte_end":86711,"line_start":958,"line_end":958,"column_start":1,"column_end":73}},{"value":"/ buffers, the `at_eof` method can indicate if we expect more data to come,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86712,"byte_end":86789,"line_start":959,"line_end":959,"column_start":1,"column_end":78}},{"value":"/ and let nom know that some parsers could still handle more data","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86790,"byte_end":86857,"line_start":960,"line_end":960,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86881,"byte_end":86887,"line_start":962,"line_end":962,"column_start":6,"column_end":12},"name":"at_eof","qualname":"::traits::AtEof::at_eof","value":"pub fn at_eof(&Self) -> bool","parent":{"krate":0,"index":541},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":86914,"byte_end":86923,"line_start":965,"line_end":965,"column_start":8,"column_end":17},"name":"need_more","qualname":"::traits::need_more","value":"pub fn need_more<I: AtEof, O, E>(I, Needed) -> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":87126,"byte_end":87139,"line_start":973,"line_end":973,"column_start":8,"column_end":21},"name":"need_more_err","qualname":"::traits::need_more_err","value":"pub fn need_more_err<I: AtEof, O, E>(I, Needed, ErrorKind<E>)\n-> IResult<I, O, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":563},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89151,"byte_end":89161,"line_start":1064,"line_end":1064,"column_start":11,"column_end":21},"name":"ExtendInto","qualname":"::traits::ExtendInto","value":"ExtendInto","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"decl_id":null,"docs":" abtracts something which can extend an `Extend`\n","sig":null,"attributes":[{"value":"/ abtracts something which can extend an `Extend`","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89089,"byte_end":89140,"line_start":1063,"line_end":1063,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":564},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89171,"byte_end":89175,"line_start":1065,"line_end":1065,"column_start":8,"column_end":12},"name":"Item","qualname":"::traits::ExtendInto::Item","value":"type Item;","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":565},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89184,"byte_end":89192,"line_start":1066,"line_end":1066,"column_start":8,"column_end":16},"name":"Extender","qualname":"::traits::ExtendInto::Extender","value":"type Extender: Extend<Self::Item>;","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89280,"byte_end":89291,"line_start":1070,"line_end":1070,"column_start":6,"column_end":17},"name":"new_builder","qualname":"::traits::ExtendInto::new_builder","value":"pub fn new_builder(&Self) -> Self::Extender","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" create a new `Extend` of the correct type\n","sig":null,"attributes":[{"value":"/ create a new `Extend` of the correct type","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89217,"byte_end":89262,"line_start":1068,"line_end":1068,"column_start":3,"column_end":48}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89265,"byte_end":89274,"line_start":1069,"line_end":1069,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89382,"byte_end":89393,"line_start":1073,"line_end":1073,"column_start":6,"column_end":17},"name":"extend_into","qualname":"::traits::ExtendInto::extend_into","value":"pub fn extend_into(&Self, &mut Self::Extender)","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" accumulate the input into an accumulator\n","sig":null,"attributes":[{"value":"/ accumulate the input into an accumulator","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89320,"byte_end":89364,"line_start":1071,"line_end":1071,"column_start":3,"column_end":47}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":89367,"byte_end":89376,"line_start":1072,"line_end":1072,"column_start":3,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":653},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"methods","qualname":"::methods","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656}],"decl_id":null,"docs":" Method macro combinators","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14815,"byte_end":14827,"line_start":449,"line_end":449,"column_start":1,"column_end":13}},{"value":"/ Method macro combinators","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263695,"byte_end":263723,"line_start":1,"line_end":1,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263724,"byte_end":263727,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These macros make parsers as methods of structs","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263728,"byte_end":263779,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ and that can take methods of structs to call","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263780,"byte_end":263828,"line_start":4,"line_end":4,"column_start":1,"column_end":49}},{"value":"/ as parsers.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263829,"byte_end":263844,"line_start":5,"line_end":5,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263845,"byte_end":263848,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ There is a trick to make them easier to assemble,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263849,"byte_end":263902,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ combinators are defined like this:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263903,"byte_end":263941,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263942,"byte_end":263945,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263946,"byte_end":263959,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/ macro_rules! tag (","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263960,"byte_end":263982,"line_start":11,"line_end":11,"column_start":1,"column_end":23}},{"value":"/   ($i:expr, $inp: expr) => (","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":263983,"byte_end":264015,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/     {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264016,"byte_end":264025,"line_start":13,"line_end":13,"column_start":1,"column_end":10}},{"value":"/       ...","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264026,"byte_end":264039,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264040,"byte_end":264049,"line_start":15,"line_end":15,"column_start":1,"column_end":10}},{"value":"/   );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264050,"byte_end":264058,"line_start":16,"line_end":16,"column_start":1,"column_end":9}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264059,"byte_end":264065,"line_start":17,"line_end":17,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264066,"byte_end":264073,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264074,"byte_end":264077,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ But when used as methods in other combinators, are used","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264078,"byte_end":264137,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/ like this:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264138,"byte_end":264152,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264153,"byte_end":264156,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264157,"byte_end":264170,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/ method!(my_function<Parser<'a> >, self, tag!(\"abcd\"));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264171,"byte_end":264229,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264230,"byte_end":264237,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264238,"byte_end":264241,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Internally, other combinators will rewrite","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264242,"byte_end":264288,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ that call to pass the input as second argument:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264289,"byte_end":264340,"line_start":28,"line_end":28,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264341,"byte_end":264344,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264345,"byte_end":264358,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/ macro_rules! method (","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264359,"byte_end":264384,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/   ($name:ident<$a:ty>, $self_:ident, $submac:ident!( $($args:tt)* )) => (","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264385,"byte_end":264462,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/     fn $name( $self_: $a, i: &[u8] ) -> IResult<&[u8], &[u8]> {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264463,"byte_end":264530,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/       $submac!(i, $($args)*)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264531,"byte_end":264563,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264564,"byte_end":264573,"line_start":35,"line_end":35,"column_start":1,"column_end":10}},{"value":"/   );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264574,"byte_end":264582,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264583,"byte_end":264589,"line_start":37,"line_end":37,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264590,"byte_end":264597,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264598,"byte_end":264601,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The `method!` macro is similar to the `named!` macro in the macros module.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264602,"byte_end":264680,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ While `named!` will create a parser function, `method!` will create a parser","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264681,"byte_end":264761,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ method on the struct it is defined in.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264762,"byte_end":264804,"line_start":42,"line_end":42,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264805,"byte_end":264808,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Compared to the `named!` macro there are a few differences in how they are","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264809,"byte_end":264887,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ invoked. A `method!` invocation always has to have the type of `self`","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264888,"byte_end":264961,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ declared and it can't be a reference due to Rust's borrow lifetime","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":264962,"byte_end":265032,"line_start":46,"line_end":46,"column_start":1,"column_end":71}},{"value":"/ restrictions:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265033,"byte_end":265050,"line_start":47,"line_end":47,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265051,"byte_end":265054,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265055,"byte_end":265068,"line_start":49,"line_end":49,"column_start":1,"column_end":14}},{"value":"/ //                  -`self`'s type-","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265069,"byte_end":265108,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/ method!(method_name<  Parser<'a> >, ...);","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265109,"byte_end":265154,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265155,"byte_end":265162,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ `self`'s type always comes first.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265163,"byte_end":265200,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ The next difference is you have to input the self struct. Due to Rust's","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265201,"byte_end":265276,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ macro hygiene the macro can't declare it on it's own.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265277,"byte_end":265334,"line_start":55,"line_end":55,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265335,"byte_end":265338,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265339,"byte_end":265352,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/ //                                                 -self-","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265353,"byte_end":265414,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"/ method!(method_name<Parser<'a>, &'a str, &'a str>, self, ...);","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265415,"byte_end":265481,"line_start":59,"line_end":59,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265482,"byte_end":265489,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ When making a parsing struct with parsing methods, due to the static borrow","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265490,"byte_end":265569,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ checker,calling any parsing methods on self (or any other parsing struct)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265570,"byte_end":265647,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ will cause self to be moved for the rest of the method.To get around this","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265648,"byte_end":265725,"line_start":63,"line_end":63,"column_start":1,"column_end":78}},{"value":"/ restriction all self is moved into the called method and then the called","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265726,"byte_end":265802,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ method will return self to the caller.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265803,"byte_end":265845,"line_start":65,"line_end":65,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265846,"byte_end":265849,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ To call a method on self you need to use the `call_m!` macro. For example:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265850,"byte_end":265928,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265929,"byte_end":265932,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265933,"byte_end":265946,"line_start":69,"line_end":69,"column_start":1,"column_end":14}},{"value":"/ struct<'a> Parser<'a> {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265947,"byte_end":265974,"line_start":70,"line_end":70,"column_start":1,"column_end":28}},{"value":"/   parsed: &'a str,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265975,"byte_end":265997,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":265998,"byte_end":266003,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/ impl<'a> Parser<'a> {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266004,"byte_end":266029,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/   // Constructor omitted for brevity","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266030,"byte_end":266070,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/   method!(take4<Parser<'a>, &'a str, &'a str>, self, take!(4));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266071,"byte_end":266138,"line_start":75,"line_end":75,"column_start":1,"column_end":68}},{"value":"/   method!(caller<Parser<'a>, &'a str, &'a str>, self, call_m!(self.take4));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266139,"byte_end":266218,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266219,"byte_end":266224,"line_start":77,"line_end":77,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266225,"byte_end":266232,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ More complicated combinations still mostly look the same as their `named!`","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266233,"byte_end":266311,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ counterparts:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266312,"byte_end":266329,"line_start":80,"line_end":80,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266330,"byte_end":266333,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266334,"byte_end":266347,"line_start":82,"line_end":82,"column_start":1,"column_end":14}},{"value":"/    method!(pub simple_chain<&mut Parser<'a>, &'a str, &'a str>, self,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266348,"byte_end":266421,"line_start":83,"line_end":83,"column_start":1,"column_end":74}},{"value":"/      do_parse!(","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266422,"byte_end":266441,"line_start":84,"line_end":84,"column_start":1,"column_end":20}},{"value":"/             call_m!(self.tag_abc)                                        >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266442,"byte_end":266521,"line_start":85,"line_end":85,"column_start":1,"column_end":80}},{"value":"/             call_m!(self.tag_def)                                        >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266522,"byte_end":266601,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"/             call_m!(self.tag_ghi)                                        >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266602,"byte_end":266681,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/       last: map!(call_m!(self.simple_peek), |parsed| sb.parsed = parsed) >>","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266682,"byte_end":266761,"line_start":88,"line_end":88,"column_start":1,"column_end":80}},{"value":"/       (last)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266762,"byte_end":266778,"line_start":89,"line_end":89,"column_start":1,"column_end":17}},{"value":"/      )","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266779,"byte_end":266789,"line_start":90,"line_end":90,"column_start":1,"column_end":11}},{"value":"/    );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266790,"byte_end":266799,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266800,"byte_end":266807,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ The three additions to method definitions to remember are:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266808,"byte_end":266870,"line_start":93,"line_end":93,"column_start":1,"column_end":63}},{"value":"/ 1. Specify `self`'s type","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266871,"byte_end":266899,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"/ 2. Pass `self` to the macro","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266900,"byte_end":266931,"line_start":95,"line_end":95,"column_start":1,"column_end":32}},{"value":"/ 4. Call parser methods using the `call_m!` macro.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/methods.rs","byte_start":266932,"byte_end":266985,"line_start":96,"line_end":96,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":680},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bits","qualname":"::bits","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"decl_id":null,"docs":" Bit level parsers and combinators","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14870,"byte_end":14882,"line_start":454,"line_end":454,"column_start":1,"column_end":13}},{"value":"/ Bit level parsers and combinators","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":342958,"byte_end":342995,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":342996,"byte_end":342999,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Bit parsing is handled by tweaking the input in most macros.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343000,"byte_end":343064,"line_start":3,"line_end":3,"column_start":1,"column_end":65}},{"value":"/ In byte level parsing, the input is generally a `&[u8]` passed from combinator","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343065,"byte_end":343147,"line_start":4,"line_end":4,"column_start":1,"column_end":83}},{"value":"/ to combinator as the slices are manipulated.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343148,"byte_end":343196,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343197,"byte_end":343200,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Bit parsers take a `(&[u8], usize)` as input. The first part of the tuple is a byte slice,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343201,"byte_end":343295,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ the second part is a bit offset in the first byte of the slice.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343296,"byte_end":343363,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343364,"byte_end":343367,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ By passing a pair like this, we can leverage most of the existing combinators, and avoid","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343368,"byte_end":343460,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/ transforming the whole slice to a vector of booleans. This should make it easy","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343461,"byte_end":343543,"line_start":11,"line_end":11,"column_start":1,"column_end":83}},{"value":"/ to see a byte slice as a bit stream, and parse code points of arbitrary bit length.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343544,"byte_end":343631,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/bits.rs","byte_start":343632,"byte_end":343635,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2758},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363126,"byte_end":363133,"line_start":126,"line_end":126,"column_start":56,"column_end":63},"name":"newline","qualname":"::character::newline","value":"pub fn newline(&[u8]) -> crate::IResult<&[u8], char, u32>","parent":null,"children":[],"decl_id":null,"docs":"Matches a newline character '\\n'\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2778},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363207,"byte_end":363210,"line_start":128,"line_end":128,"column_start":52,"column_end":55},"name":"tab","qualname":"::character::tab","value":"pub fn tab(&[u8]) -> crate::IResult<&[u8], char, u32>","parent":null,"children":[],"decl_id":null,"docs":"Matches a tab character '\\t'\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363546,"byte_end":363553,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"anychar","qualname":"::character::anychar","value":"pub fn anychar<T>(T) -> IResult<T, char> where T: InputIter + InputLength +\nSlice<RangeFrom<usize>> + AtEof, <T as InputIter>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" matches one byte as a character. Note that the input type will\n accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","sig":null,"attributes":[{"value":"/ matches one byte as a character. Note that the input type will","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363233,"byte_end":363299,"line_start":130,"line_end":130,"column_start":1,"column_end":67}},{"value":"/ accept a `str`, but not a `&[u8]`, unlike many other nom parsers.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363300,"byte_end":363369,"line_start":131,"line_end":131,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363370,"byte_end":363373,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363374,"byte_end":363387,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363388,"byte_end":363395,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363396,"byte_end":363432,"line_start":135,"line_end":135,"column_start":1,"column_end":37}},{"value":"/ # use nom::anychar;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363433,"byte_end":363456,"line_start":136,"line_end":136,"column_start":1,"column_end":24}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363457,"byte_end":363474,"line_start":137,"line_end":137,"column_start":1,"column_end":18}},{"value":"/ assert_eq!(anychar(\"abc\"), Ok((\"bc\",'a')));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363475,"byte_end":363522,"line_start":138,"line_end":138,"column_start":1,"column_end":48}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363523,"byte_end":363530,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/character.rs","byte_start":363531,"byte_end":363538,"line_start":140,"line_end":140,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":786},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366327,"byte_end":366333,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"tag_cl","qualname":"::nom::tag_cl","value":"pub fn tag_cl<'a, 'b>(&'a [u8])\n-> Box<Fn(&'b [u8]) -> IResult<&'b [u8], &'b [u8]> + 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366284,"byte_end":366309,"line_start":23,"line_end":23,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366310,"byte_end":366319,"line_start":24,"line_end":24,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366748,"byte_end":366753,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"print","qualname":"::nom::print","value":"pub fn print<T: Debug>(T) -> IResult<T, ()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366707,"byte_end":366730,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366731,"byte_end":366740,"line_start":37,"line_end":37,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366859,"byte_end":366864,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"begin","qualname":"::nom::begin","value":"pub fn begin(&[u8]) -> IResult<(), &[u8]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366842,"byte_end":366851,"line_start":43,"line_end":43,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":366931,"byte_end":366935,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"crlf","qualname":"::nom::crlf","value":"pub fn crlf<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + AtEof,\nT: Compare<&'static str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":367569,"byte_end":367584,"line_start":67,"line_end":67,"column_start":8,"column_end":23},"name":"not_line_ending","qualname":"::nom::not_line_ending","value":"pub fn not_line_ending<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + InputLength +\nAtEof, T: Compare<&'static str>, <T as InputIter>::Item: AsChar,\n<T as InputIter>::RawItem: AsChar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":368891,"byte_end":368902,"line_start":109,"line_end":109,"column_start":8,"column_end":19},"name":"line_ending","qualname":"::nom::line_ending","value":"pub fn line_ending<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + InputLength +\nAtEof, T: Compare<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an end of line (both '\\n' and '\\r\\n')\n","sig":null,"attributes":[{"value":"/ Recognizes an end of line (both '\\n' and '\\r\\n')","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":368831,"byte_end":368883,"line_start":108,"line_end":108,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":369682,"byte_end":369685,"line_start":129,"line_end":129,"column_start":8,"column_end":11},"name":"eol","qualname":"::nom::eol","value":"pub fn eol<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputIter + InputLength +\nAtEof, T: Compare<&'static str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":369955,"byte_end":369968,"line_start":140,"line_end":140,"column_start":8,"column_end":21},"name":"is_alphabetic","qualname":"::nom::is_alphabetic","value":"pub fn is_alphabetic(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphabetic: A-Z, a-z\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII alphabetic: A-Z, a-z","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":369890,"byte_end":369937,"line_start":138,"line_end":138,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":369938,"byte_end":369947,"line_start":139,"line_end":139,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370109,"byte_end":370117,"line_start":146,"line_end":146,"column_start":8,"column_end":16},"name":"is_digit","qualname":"::nom::is_digit","value":"pub fn is_digit(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII digit: 0-9\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII digit: 0-9","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370054,"byte_end":370091,"line_start":144,"line_end":144,"column_start":1,"column_end":38}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370092,"byte_end":370101,"line_start":145,"line_end":145,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":804},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370238,"byte_end":370250,"line_start":152,"line_end":152,"column_start":8,"column_end":20},"name":"is_hex_digit","qualname":"::nom::is_hex_digit","value":"pub fn is_hex_digit(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII hex digit: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII hex digit: 0-9, A-F, a-f","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370169,"byte_end":370220,"line_start":150,"line_end":150,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370221,"byte_end":370230,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370429,"byte_end":370441,"line_start":158,"line_end":158,"column_start":8,"column_end":20},"name":"is_oct_digit","qualname":"::nom::is_oct_digit","value":"pub fn is_oct_digit(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII octal digit: 0-7\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII octal digit: 0-7","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370368,"byte_end":370411,"line_start":156,"line_end":156,"column_start":1,"column_end":44}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370412,"byte_end":370421,"line_start":157,"line_end":157,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":806},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370565,"byte_end":370580,"line_start":164,"line_end":164,"column_start":8,"column_end":23},"name":"is_alphanumeric","qualname":"::nom::is_alphanumeric","value":"pub fn is_alphanumeric(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370493,"byte_end":370547,"line_start":162,"line_end":162,"column_start":1,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370548,"byte_end":370557,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370698,"byte_end":370706,"line_start":170,"line_end":170,"column_start":8,"column_end":16},"name":"is_space","qualname":"::nom::is_space","value":"pub fn is_space(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if byte is ASCII space or tab\n","sig":null,"attributes":[{"value":"/ Tests if byte is ASCII space or tab","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370641,"byte_end":370680,"line_start":168,"line_end":168,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":370681,"byte_end":370690,"line_start":169,"line_end":169,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371210,"byte_end":371215,"line_start":184,"line_end":184,"column_start":8,"column_end":13},"name":"alpha","qualname":"::nom::alpha","value":"pub fn alpha<T>(T) -> IResult<T, T, u32> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase alphabetic characters.\n For ASCII strings: a-zA-Z\n For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more lowercase and uppercase alphabetic characters.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371021,"byte_end":371094,"line_start":181,"line_end":181,"column_start":1,"column_end":74}},{"value":"/ For ASCII strings: a-zA-Z","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371095,"byte_end":371124,"line_start":182,"line_end":182,"column_start":1,"column_end":30}},{"value":"/ For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371125,"byte_end":371202,"line_start":183,"line_end":183,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371538,"byte_end":371544,"line_start":195,"line_end":195,"column_start":8,"column_end":14},"name":"alpha0","qualname":"::nom::alpha0","value":"pub fn alpha0<T>(T) -> IResult<T, T, u32> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more lowercase and uppercase alphabetic characters.\n For ASCII strings: a-zA-Z\n For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more lowercase and uppercase alphabetic characters.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371348,"byte_end":371422,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"/ For ASCII strings: a-zA-Z","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371423,"byte_end":371452,"line_start":193,"line_end":193,"column_start":1,"column_end":30}},{"value":"/ For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371453,"byte_end":371530,"line_start":194,"line_end":194,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":813},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371900,"byte_end":371906,"line_start":206,"line_end":206,"column_start":8,"column_end":14},"name":"alpha1","qualname":"::nom::alpha1","value":"pub fn alpha1<T>(T) -> IResult<T, T, u32> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more lowercase and uppercase alphabetic characters\n For ASCII strings: a-zA-Z\n For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more lowercase and uppercase alphabetic characters","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371712,"byte_end":371784,"line_start":203,"line_end":203,"column_start":1,"column_end":73}},{"value":"/ For ASCII strings: a-zA-Z","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371785,"byte_end":371814,"line_start":204,"line_end":204,"column_start":1,"column_end":30}},{"value":"/ For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":371815,"byte_end":371892,"line_start":205,"line_end":205,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":816},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372153,"byte_end":372158,"line_start":215,"line_end":215,"column_start":8,"column_end":13},"name":"digit","qualname":"::nom::digit","value":"pub fn digit<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical characters: 0-9\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical characters: 0-9","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372093,"byte_end":372145,"line_start":214,"line_end":214,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":818},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372347,"byte_end":372353,"line_start":224,"line_end":224,"column_start":8,"column_end":14},"name":"digit0","qualname":"::nom::digit0","value":"pub fn digit0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more numerical characters: 0-9\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more numerical characters: 0-9","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372286,"byte_end":372339,"line_start":223,"line_end":223,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372580,"byte_end":372586,"line_start":233,"line_end":233,"column_start":8,"column_end":14},"name":"digit1","qualname":"::nom::digit1","value":"pub fn digit1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical characters: 0-9\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical characters: 0-9","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372520,"byte_end":372572,"line_start":232,"line_end":232,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":824},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372854,"byte_end":372863,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"hex_digit","qualname":"::nom::hex_digit","value":"pub fn hex_digit<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372772,"byte_end":372846,"line_start":241,"line_end":241,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373078,"byte_end":373088,"line_start":251,"line_end":251,"column_start":8,"column_end":18},"name":"hex_digit0","qualname":"::nom::hex_digit0","value":"pub fn hex_digit0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":372995,"byte_end":373070,"line_start":250,"line_end":250,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":829},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373336,"byte_end":373346,"line_start":259,"line_end":259,"column_start":8,"column_end":18},"name":"hex_digit1","qualname":"::nom::hex_digit1","value":"pub fn hex_digit1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f\n","sig":null,"attributes":[{"value":"/ Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373254,"byte_end":373328,"line_start":258,"line_end":258,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":832},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373591,"byte_end":373600,"line_start":268,"line_end":268,"column_start":8,"column_end":17},"name":"oct_digit","qualname":"::nom::oct_digit","value":"pub fn oct_digit<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7\n","sig":null,"attributes":[{"value":"/ Recognizes one or more octal characters: 0-7","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373535,"byte_end":373583,"line_start":267,"line_end":267,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":834},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373789,"byte_end":373799,"line_start":277,"line_end":277,"column_start":8,"column_end":18},"name":"oct_digit0","qualname":"::nom::oct_digit0","value":"pub fn oct_digit0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more octal characters: 0-7\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more octal characters: 0-7","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373732,"byte_end":373781,"line_start":276,"line_end":276,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":837},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374022,"byte_end":374032,"line_start":286,"line_end":286,"column_start":8,"column_end":18},"name":"oct_digit1","qualname":"::nom::oct_digit1","value":"pub fn oct_digit1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more octal characters: 0-7\n","sig":null,"attributes":[{"value":"/ Recognizes one or more octal characters: 0-7","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":373966,"byte_end":374014,"line_start":285,"line_end":285,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":840},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374410,"byte_end":374422,"line_start":297,"line_end":297,"column_start":8,"column_end":20},"name":"alphanumeric","qualname":"::nom::alphanumeric","value":"pub fn alphanumeric<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical and alphabetic characters\n For ASCII strings: 0-9a-zA-Z\n For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical and alphabetic characters","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374221,"byte_end":374283,"line_start":294,"line_end":294,"column_start":1,"column_end":63}},{"value":"/ For ASCII strings: 0-9a-zA-Z","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374284,"byte_end":374316,"line_start":295,"line_end":295,"column_start":1,"column_end":33}},{"value":"/ For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374317,"byte_end":374402,"line_start":296,"line_end":296,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":842},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374748,"byte_end":374761,"line_start":308,"line_end":308,"column_start":8,"column_end":21},"name":"alphanumeric0","qualname":"::nom::alphanumeric0","value":"pub fn alphanumeric0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more numerical and alphabetic characters.\n For ASCII strings: 0-9a-zA-Z\n For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more numerical and alphabetic characters.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374557,"byte_end":374621,"line_start":305,"line_end":305,"column_start":1,"column_end":65}},{"value":"/ For ASCII strings: 0-9a-zA-Z","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374622,"byte_end":374654,"line_start":306,"line_end":306,"column_start":1,"column_end":33}},{"value":"/ For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374655,"byte_end":374740,"line_start":307,"line_end":307,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":845},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375116,"byte_end":375129,"line_start":318,"line_end":318,"column_start":8,"column_end":21},"name":"alphanumeric1","qualname":"::nom::alphanumeric1","value":"pub fn alphanumeric1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more numerical and alphabetic characters.\n For ASCII strings: 0-9a-zA-Z\n For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)\n","sig":null,"attributes":[{"value":"/ Recognizes one or more numerical and alphabetic characters.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374926,"byte_end":374989,"line_start":315,"line_end":315,"column_start":1,"column_end":64}},{"value":"/ For ASCII strings: 0-9a-zA-Z","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":374990,"byte_end":375022,"line_start":316,"line_end":316,"column_start":1,"column_end":33}},{"value":"/ For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375023,"byte_end":375108,"line_start":317,"line_end":317,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":848},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375371,"byte_end":375376,"line_start":327,"line_end":327,"column_start":8,"column_end":13},"name":"space","qualname":"::nom::space","value":"pub fn space<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces and tabs","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375321,"byte_end":375363,"line_start":326,"line_end":326,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":850},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375563,"byte_end":375569,"line_start":336,"line_end":336,"column_start":8,"column_end":14},"name":"space0","qualname":"::nom::space0","value":"pub fn space0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces and tabs\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more spaces and tabs","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375512,"byte_end":375555,"line_start":335,"line_end":335,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":853},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375843,"byte_end":375849,"line_start":347,"line_end":347,"column_start":8,"column_end":14},"name":"space1","qualname":"::nom::space1","value":"pub fn space1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces and tabs\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces and tabs","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":375793,"byte_end":375835,"line_start":346,"line_end":346,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":856},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":376192,"byte_end":376202,"line_start":362,"line_end":362,"column_start":8,"column_end":18},"name":"multispace","qualname":"::nom::multispace","value":"pub fn multispace<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces, tabs, carriage returns and line feeds","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":376112,"byte_end":376184,"line_start":361,"line_end":361,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":858},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":376424,"byte_end":376435,"line_start":371,"line_end":371,"column_start":8,"column_end":19},"name":"multispace0","qualname":"::nom::multispace0","value":"pub fn multispace0<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes zero or more spaces, tabs, carriage returns and line feeds\n","sig":null,"attributes":[{"value":"/ Recognizes zero or more spaces, tabs, carriage returns and line feeds","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":376343,"byte_end":376416,"line_start":370,"line_end":370,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":861},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":376765,"byte_end":376776,"line_start":382,"line_end":382,"column_start":8,"column_end":19},"name":"multispace1","qualname":"::nom::multispace1","value":"pub fn multispace1<T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone","parent":null,"children":[],"decl_id":null,"docs":" Recognizes one or more spaces, tabs, carriage returns and line feeds\n","sig":null,"attributes":[{"value":"/ Recognizes one or more spaces, tabs, carriage returns and line feeds","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":376685,"byte_end":376757,"line_start":381,"line_end":381,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":864},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377077,"byte_end":377089,"line_start":396,"line_end":396,"column_start":8,"column_end":20},"name":"sized_buffer","qualname":"::nom::sized_buffer","value":"pub fn sized_buffer(&[u8]) -> IResult<&[u8], &[u8]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":865},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377461,"byte_end":377466,"line_start":412,"line_end":412,"column_start":8,"column_end":13},"name":"be_u8","qualname":"::nom::be_u8","value":"pub fn be_u8(&[u8]) -> IResult<&[u8], u8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes an unsigned 1 byte integer (equivalent to take!(1)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377378,"byte_end":377443,"line_start":410,"line_end":410,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377444,"byte_end":377453,"line_start":411,"line_end":411,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":866},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377664,"byte_end":377670,"line_start":422,"line_end":422,"column_start":8,"column_end":14},"name":"be_u16","qualname":"::nom::be_u16","value":"pub fn be_u16(&[u8]) -> IResult<&[u8], u16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 2 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377596,"byte_end":377646,"line_start":420,"line_end":420,"column_start":1,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377647,"byte_end":377656,"line_start":421,"line_end":421,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":867},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377917,"byte_end":377923,"line_start":433,"line_end":433,"column_start":8,"column_end":14},"name":"be_u24","qualname":"::nom::be_u24","value":"pub fn be_u24(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 3 byte integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 3 byte integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377850,"byte_end":377899,"line_start":431,"line_end":431,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":377900,"byte_end":377909,"line_start":432,"line_end":432,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":868},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378197,"byte_end":378203,"line_start":444,"line_end":444,"column_start":8,"column_end":14},"name":"be_u32","qualname":"::nom::be_u32","value":"pub fn be_u32(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 4 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378129,"byte_end":378179,"line_start":442,"line_end":442,"column_start":1,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378180,"byte_end":378189,"line_start":443,"line_end":443,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":869},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378499,"byte_end":378505,"line_start":455,"line_end":455,"column_start":8,"column_end":14},"name":"be_u64","qualname":"::nom::be_u64","value":"pub fn be_u64(&[u8]) -> IResult<&[u8], u64, u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 8 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378431,"byte_end":378481,"line_start":453,"line_end":453,"column_start":1,"column_end":51}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378482,"byte_end":378491,"line_start":454,"line_end":454,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":870},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378929,"byte_end":378936,"line_start":468,"line_end":468,"column_start":8,"column_end":15},"name":"be_u128","qualname":"::nom::be_u128","value":"pub fn be_u128(&[u8]) -> IResult<&[u8], u128, u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian unsigned 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian unsigned 16 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378840,"byte_end":378891,"line_start":465,"line_end":465,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378892,"byte_end":378901,"line_start":466,"line_end":466,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":378902,"byte_end":378921,"line_start":467,"line_end":467,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":871},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379656,"byte_end":379661,"line_start":494,"line_end":494,"column_start":8,"column_end":13},"name":"be_i8","qualname":"::nom::be_i8","value":"pub fn be_i8(&[u8]) -> IResult<&[u8], i8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes a signed 1 byte integer (equivalent to take!(1)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379576,"byte_end":379638,"line_start":492,"line_end":492,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379639,"byte_end":379648,"line_start":493,"line_end":493,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":872},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379795,"byte_end":379801,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"be_i16","qualname":"::nom::be_i16","value":"pub fn be_i16(&[u8]) -> IResult<&[u8], i16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 2 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379729,"byte_end":379777,"line_start":498,"line_end":498,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379778,"byte_end":379787,"line_start":499,"line_end":499,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":873},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379938,"byte_end":379944,"line_start":506,"line_end":506,"column_start":8,"column_end":14},"name":"be_i24","qualname":"::nom::be_i24","value":"pub fn be_i24(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 3 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 3 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379872,"byte_end":379920,"line_start":504,"line_end":504,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":379921,"byte_end":379930,"line_start":505,"line_end":505,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":874},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380231,"byte_end":380237,"line_start":517,"line_end":517,"column_start":8,"column_end":14},"name":"be_i32","qualname":"::nom::be_i32","value":"pub fn be_i32(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 4 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380165,"byte_end":380213,"line_start":515,"line_end":515,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380214,"byte_end":380223,"line_start":516,"line_end":516,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":875},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380374,"byte_end":380380,"line_start":523,"line_end":523,"column_start":8,"column_end":14},"name":"be_i64","qualname":"::nom::be_i64","value":"pub fn be_i64(&[u8]) -> IResult<&[u8], i64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 8 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380308,"byte_end":380356,"line_start":521,"line_end":521,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380357,"byte_end":380366,"line_start":522,"line_end":522,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":876},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380538,"byte_end":380545,"line_start":530,"line_end":530,"column_start":8,"column_end":15},"name":"be_i128","qualname":"::nom::be_i128","value":"pub fn be_i128(&[u8]) -> IResult<&[u8], i128>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian signed 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes big endian signed 16 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380451,"byte_end":380500,"line_start":527,"line_end":527,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380501,"byte_end":380510,"line_start":528,"line_end":528,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380511,"byte_end":380530,"line_start":529,"line_end":529,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":877},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380702,"byte_end":380707,"line_start":536,"line_end":536,"column_start":8,"column_end":13},"name":"le_u8","qualname":"::nom::le_u8","value":"pub fn le_u8(&[u8]) -> IResult<&[u8], u8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes an unsigned 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes an unsigned 1 byte integer (equivalent to take!(1)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380619,"byte_end":380684,"line_start":534,"line_end":534,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380685,"byte_end":380694,"line_start":535,"line_end":535,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":878},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380908,"byte_end":380914,"line_start":546,"line_end":546,"column_start":8,"column_end":14},"name":"le_u16","qualname":"::nom::le_u16","value":"pub fn le_u16(&[u8]) -> IResult<&[u8], u16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 2 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380837,"byte_end":380890,"line_start":544,"line_end":544,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":380891,"byte_end":380900,"line_start":545,"line_end":545,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":879},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381164,"byte_end":381170,"line_start":557,"line_end":557,"column_start":8,"column_end":14},"name":"le_u24","qualname":"::nom::le_u24","value":"pub fn le_u24(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 3 byte integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 3 byte integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381094,"byte_end":381146,"line_start":555,"line_end":555,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381147,"byte_end":381156,"line_start":556,"line_end":556,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":880},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381447,"byte_end":381453,"line_start":568,"line_end":568,"column_start":8,"column_end":14},"name":"le_u32","qualname":"::nom::le_u32","value":"pub fn le_u32(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 4 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381376,"byte_end":381429,"line_start":566,"line_end":566,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381430,"byte_end":381439,"line_start":567,"line_end":567,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":881},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381752,"byte_end":381758,"line_start":579,"line_end":579,"column_start":8,"column_end":14},"name":"le_u64","qualname":"::nom::le_u64","value":"pub fn le_u64(&[u8]) -> IResult<&[u8], u64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 8 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381681,"byte_end":381734,"line_start":577,"line_end":577,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":381735,"byte_end":381744,"line_start":578,"line_end":578,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":882},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382180,"byte_end":382187,"line_start":592,"line_end":592,"column_start":8,"column_end":15},"name":"le_u128","qualname":"::nom::le_u128","value":"pub fn le_u128(&[u8]) -> IResult<&[u8], u128, u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian unsigned 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian unsigned 16 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382088,"byte_end":382142,"line_start":589,"line_end":589,"column_start":1,"column_end":55}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382143,"byte_end":382152,"line_start":590,"line_end":590,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382153,"byte_end":382172,"line_start":591,"line_end":591,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":883},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382907,"byte_end":382912,"line_start":618,"line_end":618,"column_start":8,"column_end":13},"name":"le_i8","qualname":"::nom::le_i8","value":"pub fn le_i8(&[u8]) -> IResult<&[u8], i8>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a signed 1 byte integer (equivalent to take!(1)\n","sig":null,"attributes":[{"value":"/ Recognizes a signed 1 byte integer (equivalent to take!(1)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382827,"byte_end":382889,"line_start":616,"line_end":616,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382890,"byte_end":382899,"line_start":617,"line_end":617,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":884},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383049,"byte_end":383055,"line_start":624,"line_end":624,"column_start":8,"column_end":14},"name":"le_i16","qualname":"::nom::le_i16","value":"pub fn le_i16(&[u8]) -> IResult<&[u8], i16>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 2 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 2 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":382980,"byte_end":383031,"line_start":622,"line_end":622,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383032,"byte_end":383041,"line_start":623,"line_end":623,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":885},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383195,"byte_end":383201,"line_start":630,"line_end":630,"column_start":8,"column_end":14},"name":"le_i24","qualname":"::nom::le_i24","value":"pub fn le_i24(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 3 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 3 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383126,"byte_end":383177,"line_start":628,"line_end":628,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383178,"byte_end":383187,"line_start":629,"line_end":629,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":886},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383491,"byte_end":383497,"line_start":641,"line_end":641,"column_start":8,"column_end":14},"name":"le_i32","qualname":"::nom::le_i32","value":"pub fn le_i32(&[u8]) -> IResult<&[u8], i32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 4 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 4 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383422,"byte_end":383473,"line_start":639,"line_end":639,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383474,"byte_end":383483,"line_start":640,"line_end":640,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":887},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383637,"byte_end":383643,"line_start":647,"line_end":647,"column_start":8,"column_end":14},"name":"le_i64","qualname":"::nom::le_i64","value":"pub fn le_i64(&[u8]) -> IResult<&[u8], i64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 8 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 8 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383568,"byte_end":383619,"line_start":645,"line_end":645,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383620,"byte_end":383629,"line_start":646,"line_end":646,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":888},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383804,"byte_end":383811,"line_start":654,"line_end":654,"column_start":8,"column_end":15},"name":"le_i128","qualname":"::nom::le_i128","value":"pub fn le_i128(&[u8]) -> IResult<&[u8], i128>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian signed 16 bytes integer\n","sig":null,"attributes":[{"value":"/ Recognizes little endian signed 16 bytes integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383714,"byte_end":383766,"line_start":651,"line_end":651,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383767,"byte_end":383776,"line_start":652,"line_end":652,"column_start":1,"column_end":10}},{"value":"cfg(stable_i128)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383777,"byte_end":383796,"line_start":653,"line_end":653,"column_start":1,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2871},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383982,"byte_end":383985,"line_start":661,"line_end":661,"column_start":3,"column_end":6},"name":"Big","qualname":"::nom::Endianness::Big","value":"Endianness::Big","parent":{"krate":0,"index":2870},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2873},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383989,"byte_end":383995,"line_start":662,"line_end":662,"column_start":3,"column_end":9},"name":"Little","qualname":"::nom::Endianness::Little","value":"Endianness::Little","parent":{"krate":0,"index":2870},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2870},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383967,"byte_end":383977,"line_start":660,"line_end":660,"column_start":10,"column_end":20},"name":"Endianness","qualname":"::nom::Endianness","value":"pub enum Endianness { Big, Little, }","parent":null,"children":[{"krate":0,"index":2871},{"krate":0,"index":2873}],"decl_id":null,"docs":" Configurable endianness\n","sig":null,"attributes":[{"value":"/ Configurable endianness","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":383885,"byte_end":383912,"line_start":658,"line_end":658,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":897},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386451,"byte_end":386457,"line_start":703,"line_end":703,"column_start":8,"column_end":14},"name":"be_f32","qualname":"::nom::be_f32","value":"pub fn be_f32(&[u8]) -> IResult<&[u8], f32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian 4 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes big endian 4 bytes floating point number","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386378,"byte_end":386433,"line_start":701,"line_end":701,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386434,"byte_end":386443,"line_start":702,"line_end":702,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":898},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386669,"byte_end":386675,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"be_f64","qualname":"::nom::be_f64","value":"pub fn be_f64(&[u8]) -> IResult<&[u8], f64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes big endian 8 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes big endian 8 bytes floating point number","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386596,"byte_end":386651,"line_start":710,"line_end":710,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386652,"byte_end":386661,"line_start":711,"line_end":711,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":899},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386890,"byte_end":386896,"line_start":721,"line_end":721,"column_start":8,"column_end":14},"name":"le_f32","qualname":"::nom::le_f32","value":"pub fn le_f32(&[u8]) -> IResult<&[u8], f32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian 4 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes little endian 4 bytes floating point number","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386814,"byte_end":386872,"line_start":719,"line_end":719,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":386873,"byte_end":386882,"line_start":720,"line_end":720,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":900},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387111,"byte_end":387117,"line_start":730,"line_end":730,"column_start":8,"column_end":14},"name":"le_f64","qualname":"::nom::le_f64","value":"pub fn le_f64(&[u8]) -> IResult<&[u8], f64>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes little endian 8 bytes floating point number\n","sig":null,"attributes":[{"value":"/ Recognizes little endian 8 bytes floating point number","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387035,"byte_end":387093,"line_start":728,"line_end":728,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387094,"byte_end":387103,"line_start":729,"line_end":729,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":901},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387310,"byte_end":387317,"line_start":739,"line_end":739,"column_start":8,"column_end":15},"name":"hex_u32","qualname":"::nom::hex_u32","value":"pub fn hex_u32(&[u8]) -> IResult<&[u8], u32>","parent":null,"children":[],"decl_id":null,"docs":" Recognizes a hex-encoded integer\n","sig":null,"attributes":[{"value":"/ Recognizes a hex-encoded integer","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387256,"byte_end":387292,"line_start":737,"line_end":737,"column_start":1,"column_end":37}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387293,"byte_end":387302,"line_start":738,"line_end":738,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":903},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387938,"byte_end":387947,"line_start":767,"line_end":767,"column_start":8,"column_end":17},"name":"non_empty","qualname":"::nom::non_empty","value":"pub fn non_empty<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputLength + AtEof","parent":null,"children":[],"decl_id":null,"docs":" Recognizes non empty buffers\n","sig":null,"attributes":[{"value":"/ Recognizes non empty buffers","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387888,"byte_end":387920,"line_start":765,"line_end":765,"column_start":1,"column_end":33}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":387921,"byte_end":387930,"line_start":766,"line_end":766,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":905},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388313,"byte_end":388317,"line_start":781,"line_end":781,"column_start":8,"column_end":12},"name":"rest","qualname":"::nom::rest","value":"pub fn rest<T>(T) -> IResult<T, T> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputLength","parent":null,"children":[],"decl_id":null,"docs":" Return the remaining input.\n","sig":null,"attributes":[{"value":"/ Return the remaining input.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388264,"byte_end":388295,"line_start":779,"line_end":779,"column_start":1,"column_end":32}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388296,"byte_end":388305,"line_start":780,"line_end":780,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":907},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388564,"byte_end":388572,"line_start":791,"line_end":791,"column_start":8,"column_end":16},"name":"rest_len","qualname":"::nom::rest_len","value":"pub fn rest_len<T>(T) -> IResult<T, usize> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: InputLength","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the remaining input.\n","sig":null,"attributes":[{"value":"/ Return the length of the remaining input.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388501,"byte_end":388546,"line_start":789,"line_end":789,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388547,"byte_end":388556,"line_start":790,"line_end":790,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":909},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388824,"byte_end":388830,"line_start":802,"line_end":802,"column_start":8,"column_end":14},"name":"rest_s","qualname":"::nom::rest_s","value":"pub fn rest_s(&str) -> IResult<&str, &str>","parent":null,"children":[],"decl_id":null,"docs":" Return the remaining input, for strings.\n","sig":null,"attributes":[{"value":"/ Return the remaining input, for strings.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388762,"byte_end":388806,"line_start":800,"line_end":800,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388807,"byte_end":388816,"line_start":801,"line_end":801,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":910},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388976,"byte_end":388991,"line_start":808,"line_end":808,"column_start":8,"column_end":23},"name":"recognize_float","qualname":"::nom::recognize_float","value":"pub fn recognize_float<T>(T) -> IResult<T, T, u32> where\nT: Slice<Range<usize>> + Slice<RangeFrom<usize>> + Slice<RangeTo<usize>>,\nT: Clone + Offset, T: InputIter + AtEof, <T as InputIter>::Item: AsChar,\nT: InputTakeAtPosition, <T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":388909,"byte_end":388933,"line_start":806,"line_end":806,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":912},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":389780,"byte_end":389785,"line_start":837,"line_end":837,"column_start":8,"column_end":13},"name":"float","qualname":"::nom::float","value":"pub fn float<T>(T) -> IResult<T, f32, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f32> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f32\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a byte string and returns a f32","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":389621,"byte_end":389692,"line_start":834,"line_end":834,"column_start":1,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":389693,"byte_end":389718,"line_start":835,"line_end":835,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":914},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":390307,"byte_end":390314,"line_start":852,"line_end":852,"column_start":8,"column_end":15},"name":"float_s","qualname":"::nom::float_s","value":"pub fn float_s<T>(T) -> IResult<T, f32, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f32> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a string and returns a f32\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a string and returns a f32","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":390139,"byte_end":390205,"line_start":849,"line_end":849,"column_start":1,"column_end":67}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":390206,"byte_end":390231,"line_start":850,"line_end":850,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"4.1.0\", note = \"Please use `float` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":390232,"byte_end":390299,"line_start":851,"line_end":851,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":916},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":390780,"byte_end":390786,"line_start":866,"line_end":866,"column_start":8,"column_end":14},"name":"double","qualname":"::nom::double","value":"pub fn double<T>(T) -> IResult<T, f64, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f64> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a byte string and returns a f64\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a byte string and returns a f64","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":390675,"byte_end":390746,"line_start":864,"line_end":864,"column_start":1,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":390747,"byte_end":390772,"line_start":865,"line_end":865,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":918},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":391316,"byte_end":391324,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"double_s","qualname":"::nom::double_s","value":"pub fn double_s<T>(T) -> IResult<T, f64, u32> where T: Slice<Range<usize>> +\nSlice<RangeFrom<usize>> + Slice<RangeTo<usize>>, T: Clone + Offset,\nT: InputIter + InputLength + ParseTo<f64> + AtEof,\n<T as InputIter>::Item: AsChar, T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar","parent":null,"children":[],"decl_id":null,"docs":" Recognizes floating point number in a string and returns a f64\n","sig":null,"attributes":[{"value":"/ Recognizes floating point number in a string and returns a f64","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":391147,"byte_end":391213,"line_start":878,"line_end":878,"column_start":1,"column_end":67}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":391214,"byte_end":391239,"line_start":879,"line_end":879,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"4.1.0\", note = \"Please use `double` instead\")","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/nom.rs","byte_start":391240,"byte_end":391308,"line_start":880,"line_end":880,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":920},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"whitespace","qualname":"::whitespace","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":954}],"decl_id":null,"docs":" Support for whitespace delimited formats","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14949,"byte_end":14961,"line_start":462,"line_end":462,"column_start":1,"column_end":13}},{"value":"/ Support for whitespace delimited formats","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418093,"byte_end":418137,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418138,"byte_end":418141,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ a lot of textual formats allows spaces and other","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418142,"byte_end":418194,"line_start":3,"line_end":3,"column_start":1,"column_end":53}},{"value":"/ types of separators between tokens. Handling it","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418195,"byte_end":418246,"line_start":4,"line_end":4,"column_start":1,"column_end":52}},{"value":"/ manually with nom means wrapping all parsers","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418247,"byte_end":418295,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"/ like this:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418296,"byte_end":418310,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418311,"byte_end":418314,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418315,"byte_end":418328,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/ named!(token, delimited!(space, tk, space));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418329,"byte_end":418377,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418378,"byte_end":418385,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418386,"byte_end":418389,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To ease the development of such parsers, you","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418390,"byte_end":418438,"line_start":12,"line_end":12,"column_start":1,"column_end":49}},{"value":"/ can use the whitespace parsing facility, which works","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418439,"byte_end":418495,"line_start":13,"line_end":13,"column_start":1,"column_end":57}},{"value":"/ as follows:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418496,"byte_end":418511,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418512,"byte_end":418515,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418516,"byte_end":418523,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418524,"byte_end":418560,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418561,"byte_end":418578,"line_start":18,"line_end":18,"column_start":1,"column_end":18}},{"value":"/ named!(tuple<&[u8], (&[u8], &[u8]) >,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418579,"byte_end":418620,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/   ws!(tuple!( take!(3), tag!(\"de\") ))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418621,"byte_end":418662,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418663,"byte_end":418669,"line_start":21,"line_end":21,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418670,"byte_end":418673,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418674,"byte_end":418689,"line_start":23,"line_end":23,"column_start":1,"column_end":16}},{"value":"/   tuple(&b\" \\t abc de fg\"[..]),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418690,"byte_end":418725,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/  Ok((&b\"fg\"[..], (&b\"abc\"[..], &b\"de\"[..])))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418726,"byte_end":418774,"line_start":25,"line_end":25,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418775,"byte_end":418781,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418782,"byte_end":418789,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418790,"byte_end":418797,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418798,"byte_end":418801,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The `ws!` combinator will modify the parser to","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418802,"byte_end":418852,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ intersperse space parsers everywhere. By default,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418853,"byte_end":418906,"line_start":31,"line_end":31,"column_start":1,"column_end":54}},{"value":"/ it will consume the following characters: `\" \\t\\r\\n\"`.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418907,"byte_end":418965,"line_start":32,"line_end":32,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418966,"byte_end":418969,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ If you want to modify that behaviour, you can make","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":418970,"byte_end":419024,"line_start":34,"line_end":34,"column_start":1,"column_end":55}},{"value":"/ your own whitespace wrapper. As an example, if","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419025,"byte_end":419075,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/ you don't want to consume ends of lines, only","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419076,"byte_end":419125,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/ spaces and tabs, you can do it like this:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419126,"byte_end":419171,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419172,"byte_end":419175,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419176,"byte_end":419183,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate nom;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419184,"byte_end":419220,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ named!(pub space, eat_separator!(&b\" \\t\"[..]));","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419221,"byte_end":419272,"line_start":41,"line_end":41,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419273,"byte_end":419276,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ #[macro_export]","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419277,"byte_end":419296,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/ macro_rules! sp (","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419297,"byte_end":419318,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"/   ($i:expr, $($args:tt)*) => (","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419319,"byte_end":419353,"line_start":45,"line_end":45,"column_start":1,"column_end":35}},{"value":"/     {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419354,"byte_end":419363,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"/       use nom::Convert;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419364,"byte_end":419391,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/       use nom::Err;","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419392,"byte_end":419415,"line_start":48,"line_end":48,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419416,"byte_end":419419,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/       match sep!($i, space, $($args)*) {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419420,"byte_end":419464,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/         Err(e) => Err(e),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419465,"byte_end":419494,"line_start":51,"line_end":51,"column_start":1,"column_end":30}},{"value":"/         Ok((i1,o))    => {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419495,"byte_end":419525,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/           match space(i1) {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419526,"byte_end":419557,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/             Err(e) => Err(Err::convert(e)),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419558,"byte_end":419605,"line_start":54,"line_end":54,"column_start":1,"column_end":48}},{"value":"/             Ok((i2,_))    => Ok((i2, o))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419606,"byte_end":419650,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/           }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419651,"byte_end":419666,"line_start":56,"line_end":56,"column_start":1,"column_end":16}},{"value":"/         }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419667,"byte_end":419680,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/       }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419681,"byte_end":419692,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"/     }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419693,"byte_end":419702,"line_start":59,"line_end":59,"column_start":1,"column_end":10}},{"value":"/   )","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419703,"byte_end":419710,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419711,"byte_end":419717,"line_start":61,"line_end":61,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419718,"byte_end":419721,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419722,"byte_end":419739,"line_start":63,"line_end":63,"column_start":1,"column_end":18}},{"value":"/ named!(tuple<&[u8], (&[u8], &[u8]) >,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419740,"byte_end":419781,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"/   sp!(tuple!( take!(3), tag!(\"de\") ))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419782,"byte_end":419823,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419824,"byte_end":419830,"line_start":66,"line_end":66,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419831,"byte_end":419834,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419835,"byte_end":419850,"line_start":68,"line_end":68,"column_start":1,"column_end":16}},{"value":"/   tuple(&b\" \\t abc de fg\"[..]),","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419851,"byte_end":419886,"line_start":69,"line_end":69,"column_start":1,"column_end":36}},{"value":"/  Ok((&b\"fg\"[..], (&b\"abc\"[..], &b\"de\"[..])))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419887,"byte_end":419935,"line_start":70,"line_end":70,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419936,"byte_end":419942,"line_start":71,"line_end":71,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419943,"byte_end":419950,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419951,"byte_end":419958,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419959,"byte_end":419962,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ This combinator works by replacing each combinator with","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":419963,"byte_end":420022,"line_start":75,"line_end":75,"column_start":1,"column_end":60}},{"value":"/ a version that supports wrapping with separator parsers.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420023,"byte_end":420083,"line_start":76,"line_end":76,"column_start":1,"column_end":61}},{"value":"/ It will not support the combinators you wrote in your","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420084,"byte_end":420141,"line_start":77,"line_end":77,"column_start":1,"column_end":58}},{"value":"/ own code. You can still manually wrap them with the separator","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420142,"byte_end":420207,"line_start":78,"line_end":78,"column_start":1,"column_end":66}},{"value":"/ you want, or you can copy the macros defined in src/whitespace.rs","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420208,"byte_end":420277,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"/ and modify them to support a new combinator:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420278,"byte_end":420326,"line_start":80,"line_end":80,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420327,"byte_end":420330,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ * copy the combinator's code here, add the _sep suffix","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420331,"byte_end":420389,"line_start":82,"line_end":82,"column_start":1,"column_end":59}},{"value":"/ * add the `$separator:expr` as second argument","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420390,"byte_end":420440,"line_start":83,"line_end":83,"column_start":1,"column_end":51}},{"value":"/ * wrap any sub parsers with sep!($separator, $submac!($($args)*))","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420441,"byte_end":420510,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ * reference it in the definition of `sep!` as follows:","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420511,"byte_end":420569,"line_start":85,"line_end":85,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420570,"byte_end":420573,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420574,"byte_end":420587,"line_start":87,"line_end":87,"column_start":1,"column_end":14}},{"value":"/  ($i:expr,  $separator:path, my_combinator ! ($($rest:tt)*) ) => {","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420588,"byte_end":420658,"line_start":88,"line_end":88,"column_start":1,"column_end":71}},{"value":"/    wrap_sep!($i,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420659,"byte_end":420679,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"/      $separator,","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420680,"byte_end":420700,"line_start":90,"line_end":90,"column_start":1,"column_end":21}},{"value":"/      my_combinator_sep!($separator, $($rest)*)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420701,"byte_end":420751,"line_start":91,"line_end":91,"column_start":1,"column_end":51}},{"value":"/    )","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420752,"byte_end":420760,"line_start":92,"line_end":92,"column_start":1,"column_end":9}},{"value":"/  };","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420761,"byte_end":420768,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420769,"byte_end":420776,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":420777,"byte_end":420780,"line_start":95,"line_end":95,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":950},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":443480,"byte_end":443482,"line_start":834,"line_end":834,"column_start":8,"column_end":10},"name":"sp","qualname":"::whitespace::sp","value":"pub fn sp<'a, T>(T) -> IResult<T, T> where T: InputTakeAtPosition,\n<T as InputTakeAtPosition>::Item: AsChar + Clone,\n&'a str: FindToken<<T as InputTakeAtPosition>::Item>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(unused_imports)","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/whitespace.rs","byte_start":443448,"byte_end":443472,"line_start":833,"line_end":833,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":967},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::types","value":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":3302},{"krate":0,"index":3306},{"krate":0,"index":3309},{"krate":0,"index":3311},{"krate":0,"index":3314},{"krate":0,"index":3316},{"krate":0,"index":3320},{"krate":0,"index":3322},{"krate":0,"index":3325},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1089},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1106},{"krate":0,"index":1110},{"krate":0,"index":1113},{"krate":0,"index":1118},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1132},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1142},{"krate":0,"index":3329},{"krate":0,"index":3333},{"krate":0,"index":3336},{"krate":0,"index":3338},{"krate":0,"index":3341},{"krate":0,"index":3343},{"krate":0,"index":3347},{"krate":0,"index":3349},{"krate":0,"index":3352},{"krate":0,"index":1148},{"krate":0,"index":1151},{"krate":0,"index":1155},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1185},{"krate":0,"index":1189},{"krate":0,"index":1192},{"krate":0,"index":1197},{"krate":0,"index":1202},{"krate":0,"index":1206},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1220},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":3356},{"krate":0,"index":3360},{"krate":0,"index":3363},{"krate":0,"index":3365},{"krate":0,"index":3368},{"krate":0,"index":3370},{"krate":0,"index":3374},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1260},{"krate":0,"index":1264},{"krate":0,"index":1267},{"krate":0,"index":1272},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1286},{"krate":0,"index":1291},{"krate":0,"index":1294}],"decl_id":null,"docs":" Custom input types","sig":null,"attributes":[{"value":"/ Custom input types","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":474299,"byte_end":474321,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":474322,"byte_end":474325,"line_start":2,"line_end":2,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475098,"byte_end":475109,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"CompleteStr","qualname":"::types::CompleteStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds a complete String, for which the `at_eof` method always returns true","sig":null,"attributes":[{"value":"/ Holds a complete String, for which the `at_eof` method always returns true","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":474840,"byte_end":474918,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":474919,"byte_end":474922,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This means that this input type will completely avoid nom's streaming features","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":474923,"byte_end":475005,"line_start":20,"line_end":20,"column_start":1,"column_end":83}},{"value":"/ and `Incomplete` results.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475006,"byte_end":475035,"line_start":21,"line_end":21,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":3305},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475114,"byte_end":475125,"line_start":23,"line_end":23,"column_start":28,"column_end":39},"name":"0","qualname":"::types::CompleteStr::0","value":"&'a str","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3329},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478994,"byte_end":479011,"line_start":204,"line_end":204,"column_start":12,"column_end":29},"name":"CompleteByteSlice","qualname":"::types::CompleteByteSlice","value":"","parent":null,"children":[],"decl_id":null,"docs":" Holds a complete byte array, for which the `at_eof` method always returns true","sig":null,"attributes":[{"value":"/ Holds a complete byte array, for which the `at_eof` method always returns true","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478732,"byte_end":478814,"line_start":199,"line_end":199,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478815,"byte_end":478818,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This means that this input type will completely avoid nom's streaming features","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478819,"byte_end":478901,"line_start":201,"line_end":201,"column_start":1,"column_end":83}},{"value":"/ and `Incomplete` results.","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478902,"byte_end":478931,"line_start":202,"line_end":202,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":3332},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479016,"byte_end":479028,"line_start":204,"line_end":204,"column_start":34,"column_end":46},"name":"0","qualname":"::types::CompleteByteSlice::0","value":"&'a [u8]","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3356},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483136,"byte_end":483141,"line_start":380,"line_end":380,"column_start":12,"column_end":17},"name":"Input","qualname":"::types::Input","value":"Input { inner, at_eof }","parent":null,"children":[{"krate":0,"index":3358},{"krate":0,"index":3359}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3358},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483153,"byte_end":483158,"line_start":381,"line_end":381,"column_start":7,"column_end":12},"name":"inner","qualname":"::types::Input::inner","value":"T","parent":{"krate":0,"index":3356},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3359},"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483169,"byte_end":483175,"line_start":382,"line_end":382,"column_start":7,"column_end":13},"name":"at_eof","qualname":"::types::Input::at_eof","value":"bool","parent":{"krate":0,"index":3356},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":1,"kind":"Inherent","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":30675,"byte_end":30684,"line_start":587,"line_end":587,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":35275,"byte_end":35284,"line_start":672,"line_end":672,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41540,"byte_end":41547,"line_start":36,"line_end":36,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41867,"byte_end":41874,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49311,"byte_end":49317,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51663,"byte_end":51666,"line_start":87,"line_end":87,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51900,"byte_end":51903,"line_start":101,"line_end":101,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":52470,"byte_end":52473,"line_start":122,"line_end":122,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":52721,"byte_end":52724,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":74091,"byte_end":74092,"line_start":480,"line_end":480,"column_start":107,"column_end":108},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":75867,"byte_end":75884,"line_start":546,"line_end":546,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":77804,"byte_end":77815,"line_start":614,"line_end":614,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475156,"byte_end":475167,"line_start":25,"line_end":25,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475271,"byte_end":475282,"line_start":31,"line_end":31,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475377,"byte_end":475388,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475491,"byte_end":475502,"line_start":43,"line_end":43,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475575,"byte_end":475586,"line_start":49,"line_end":49,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475706,"byte_end":475717,"line_start":58,"line_end":58,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475814,"byte_end":475825,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475972,"byte_end":475983,"line_start":72,"line_end":72,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476134,"byte_end":476145,"line_start":79,"line_end":79,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476291,"byte_end":476302,"line_start":86,"line_end":86,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476434,"byte_end":476445,"line_start":93,"line_end":93,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476957,"byte_end":476968,"line_start":116,"line_end":116,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477238,"byte_end":477249,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477353,"byte_end":477364,"line_start":133,"line_end":133,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477584,"byte_end":477595,"line_start":142,"line_end":142,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477735,"byte_end":477746,"line_start":148,"line_end":148,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477862,"byte_end":477873,"line_start":154,"line_end":154,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477995,"byte_end":478006,"line_start":160,"line_end":160,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478130,"byte_end":478141,"line_start":166,"line_end":166,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478235,"byte_end":478246,"line_start":172,"line_end":172,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478365,"byte_end":478376,"line_start":178,"line_end":178,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478502,"byte_end":478513,"line_start":185,"line_end":185,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479060,"byte_end":479077,"line_start":206,"line_end":206,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479189,"byte_end":479206,"line_start":212,"line_end":212,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479306,"byte_end":479323,"line_start":218,"line_end":218,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479444,"byte_end":479461,"line_start":227,"line_end":227,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479558,"byte_end":479575,"line_start":234,"line_end":234,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479728,"byte_end":479745,"line_start":241,"line_end":241,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479902,"byte_end":479919,"line_start":248,"line_end":248,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":480071,"byte_end":480088,"line_start":255,"line_end":255,"column_start":31,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":480226,"byte_end":480243,"line_start":262,"line_end":262,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":480819,"byte_end":480836,"line_start":285,"line_end":285,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481124,"byte_end":481141,"line_start":296,"line_end":296,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481246,"byte_end":481263,"line_start":302,"line_end":302,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481479,"byte_end":481496,"line_start":311,"line_end":311,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481717,"byte_end":481734,"line_start":320,"line_end":320,"column_start":42,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481886,"byte_end":481903,"line_start":326,"line_end":326,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482043,"byte_end":482060,"line_start":332,"line_end":332,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482176,"byte_end":482193,"line_start":338,"line_end":338,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482315,"byte_end":482332,"line_start":344,"line_end":344,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482456,"byte_end":482473,"line_start":350,"line_end":350,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482565,"byte_end":482582,"line_start":356,"line_end":356,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482707,"byte_end":482724,"line_start":362,"line_end":362,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482853,"byte_end":482870,"line_start":369,"line_end":369,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483204,"byte_end":483209,"line_start":385,"line_end":385,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483320,"byte_end":483325,"line_start":391,"line_end":391,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483527,"byte_end":483532,"line_start":400,"line_end":400,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483740,"byte_end":483745,"line_start":409,"line_end":409,"column_start":62,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483941,"byte_end":483946,"line_start":418,"line_end":418,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":484121,"byte_end":484126,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":484726,"byte_end":484731,"line_start":450,"line_end":450,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485177,"byte_end":485182,"line_start":473,"line_end":473,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485306,"byte_end":485311,"line_start":479,"line_end":479,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485561,"byte_end":485566,"line_start":488,"line_end":488,"column_start":64,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1275}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485725,"byte_end":485730,"line_start":494,"line_end":494,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485863,"byte_end":485868,"line_start":500,"line_end":500,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486011,"byte_end":486016,"line_start":506,"line_end":506,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486161,"byte_end":486166,"line_start":512,"line_end":512,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486268,"byte_end":486273,"line_start":518,"line_end":518,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1293}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486401,"byte_end":486406,"line_start":524,"line_end":524,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14581,"byte_end":14595,"line_start":432,"line_end":432,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":150}},{"kind":"Mod","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14836,"byte_end":14843,"line_start":450,"line_end":450,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":653}},{"kind":"Mod","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14891,"byte_end":14895,"line_start":455,"line_end":455,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":680}},{"kind":"Mod","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":14970,"byte_end":14980,"line_start":463,"line_end":463,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":920}},{"kind":"Mod","span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/lib.rs","byte_start":15054,"byte_end":15059,"line_start":471,"line_end":471,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":967}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":30675,"byte_end":30684,"line_start":587,"line_end":587,"column_start":9,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/util.rs","byte_start":35275,"byte_end":35284,"line_start":672,"line_end":672,"column_start":47,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1297},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41540,"byte_end":41547,"line_start":36,"line_end":36,"column_start":63,"column_end":70},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1451},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/verbose_errors.rs","byte_start":41867,"byte_end":41874,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":49311,"byte_end":49317,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51663,"byte_end":51666,"line_start":87,"line_end":87,"column_start":29,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1502},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":51900,"byte_end":51903,"line_start":101,"line_end":101,"column_start":22,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1502},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":52470,"byte_end":52473,"line_start":122,"line_end":122,"column_start":59,"column_end":62},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1502},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/internal.rs","byte_start":52721,"byte_end":52724,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":70621,"byte_end":70626,"line_start":345,"line_end":345,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":370}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":73712,"byte_end":73717,"line_start":469,"line_end":469,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":412}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":74091,"byte_end":74092,"line_start":480,"line_end":480,"column_start":107,"column_end":108},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":419},"to":{"krate":0,"index":412}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":75867,"byte_end":75884,"line_start":546,"line_end":546,"column_start":34,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":412}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/traits.rs","byte_start":77804,"byte_end":77815,"line_start":614,"line_end":614,"column_start":34,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":412}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475156,"byte_end":475167,"line_start":25,"line_end":25,"column_start":28,"column_end":39},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3302},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475271,"byte_end":475282,"line_start":31,"line_end":31,"column_start":36,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3302},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475377,"byte_end":475388,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3302},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475491,"byte_end":475502,"line_start":43,"line_end":43,"column_start":25,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3302},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475575,"byte_end":475586,"line_start":49,"line_end":49,"column_start":20,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3302},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475706,"byte_end":475717,"line_start":58,"line_end":58,"column_start":20,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":541}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475814,"byte_end":475825,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":475972,"byte_end":475983,"line_start":72,"line_end":72,"column_start":36,"column_end":47},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476134,"byte_end":476145,"line_start":79,"line_end":79,"column_start":38,"column_end":49},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476291,"byte_end":476302,"line_start":86,"line_end":86,"column_start":31,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476434,"byte_end":476445,"line_start":93,"line_end":93,"column_start":24,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":360}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":476957,"byte_end":476968,"line_start":116,"line_end":116,"column_start":24,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":370}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477238,"byte_end":477249,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477353,"byte_end":477364,"line_start":133,"line_end":133,"column_start":35,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":461}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477584,"byte_end":477595,"line_start":142,"line_end":142,"column_start":41,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":508}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477735,"byte_end":477746,"line_start":148,"line_end":148,"column_start":30,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477862,"byte_end":477873,"line_start":154,"line_end":154,"column_start":28,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":477995,"byte_end":478006,"line_start":160,"line_end":160,"column_start":36,"column_end":47},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478130,"byte_end":478141,"line_start":166,"line_end":166,"column_start":37,"column_end":48},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478235,"byte_end":478246,"line_start":172,"line_end":172,"column_start":21,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":293}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478365,"byte_end":478376,"line_start":178,"line_end":178,"column_start":22,"column_end":33},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":305}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":478502,"byte_end":478513,"line_start":185,"line_end":185,"column_start":25,"column_end":36},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":563}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479060,"byte_end":479077,"line_start":206,"line_end":206,"column_start":29,"column_end":46},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3329},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479189,"byte_end":479206,"line_start":212,"line_end":212,"column_start":37,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3329},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479306,"byte_end":479323,"line_start":218,"line_end":218,"column_start":20,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3329},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479444,"byte_end":479461,"line_start":227,"line_end":227,"column_start":20,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":541}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479558,"byte_end":479575,"line_start":234,"line_end":234,"column_start":34,"column_end":51},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479728,"byte_end":479745,"line_start":241,"line_end":241,"column_start":36,"column_end":53},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":479902,"byte_end":479919,"line_start":248,"line_end":248,"column_start":38,"column_end":55},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":480071,"byte_end":480088,"line_start":255,"line_end":255,"column_start":31,"column_end":48},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":480226,"byte_end":480243,"line_start":262,"line_end":262,"column_start":24,"column_end":41},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":360}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":480819,"byte_end":480836,"line_start":285,"line_end":285,"column_start":24,"column_end":41},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":370}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481124,"byte_end":481141,"line_start":296,"line_end":296,"column_start":26,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481246,"byte_end":481263,"line_start":302,"line_end":302,"column_start":36,"column_end":53},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":461}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481479,"byte_end":481496,"line_start":311,"line_end":311,"column_start":35,"column_end":52},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":461}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481717,"byte_end":481734,"line_start":320,"line_end":320,"column_start":42,"column_end":59},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":508}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":481886,"byte_end":481903,"line_start":326,"line_end":326,"column_start":41,"column_end":58},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":508}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482043,"byte_end":482060,"line_start":332,"line_end":332,"column_start":30,"column_end":47},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482176,"byte_end":482193,"line_start":338,"line_end":338,"column_start":28,"column_end":45},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482315,"byte_end":482332,"line_start":344,"line_end":344,"column_start":36,"column_end":53},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482456,"byte_end":482473,"line_start":350,"line_end":350,"column_start":37,"column_end":54},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482565,"byte_end":482582,"line_start":356,"line_end":356,"column_start":21,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":293}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482707,"byte_end":482724,"line_start":362,"line_end":362,"column_start":22,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":305}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":482853,"byte_end":482870,"line_start":369,"line_end":369,"column_start":38,"column_end":55},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3329},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483204,"byte_end":483209,"line_start":385,"line_end":385,"column_start":19,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":541}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483320,"byte_end":483325,"line_start":391,"line_end":391,"column_start":54,"column_end":59},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483527,"byte_end":483532,"line_start":400,"line_end":400,"column_start":58,"column_end":63},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483740,"byte_end":483745,"line_start":409,"line_end":409,"column_start":62,"column_end":67},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":483941,"byte_end":483946,"line_start":418,"line_end":418,"column_start":48,"column_end":53},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":535}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":484121,"byte_end":484126,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":360}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":484726,"byte_end":484731,"line_start":450,"line_end":450,"column_start":34,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":370}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485177,"byte_end":485182,"line_start":473,"line_end":473,"column_start":38,"column_end":43},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":281}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485306,"byte_end":485311,"line_start":479,"line_end":479,"column_start":52,"column_end":57},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":461}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485561,"byte_end":485566,"line_start":488,"line_end":488,"column_start":64,"column_end":69},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":508}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485725,"byte_end":485730,"line_start":494,"line_end":494,"column_start":46,"column_end":51},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":485863,"byte_end":485868,"line_start":500,"line_end":500,"column_start":42,"column_end":47},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486011,"byte_end":486016,"line_start":506,"line_end":506,"column_start":54,"column_end":59},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":485}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486161,"byte_end":486166,"line_start":512,"line_end":512,"column_start":52,"column_end":57},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486268,"byte_end":486273,"line_start":518,"line_end":518,"column_start":28,"column_end":33},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":293}},{"span":{"file_name":"/home/mim/.cargo/registry/src/github.com-1ecc6299db9ec823/nom-4.2.3/src/types.rs","byte_start":486401,"byte_end":486406,"line_start":524,"line_end":524,"column_start":30,"column_end":35},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":305}}]}