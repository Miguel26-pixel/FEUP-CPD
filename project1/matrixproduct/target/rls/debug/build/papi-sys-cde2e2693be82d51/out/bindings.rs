/* automatically generated by rust-bindgen */

# [ repr ( C ) ] # [ derive ( Copy , Clone , Debug , Default , Eq , Hash , Ord , PartialEq , PartialOrd ) ] pub struct __BindgenBitfieldUnit < Storage , Align > { storage : Storage , align : [ Align ; 0 ] , } impl < Storage , Align > __BindgenBitfieldUnit < Storage , Align > { # [ inline ] pub const fn new ( storage : Storage ) -> Self { Self { storage , align : [ ] , } } } impl < Storage , Align > __BindgenBitfieldUnit < Storage , Align > where Storage : AsRef < [ u8 ] > + AsMut < [ u8 ] >, { # [ inline ] pub fn get_bit ( & self , index : usize ) -> bool { debug_assert ! ( index / 8 < self . storage . as_ref ( ) . len ( ) ) ; let byte_index = index / 8 ; let byte = self . storage . as_ref ( ) [ byte_index ] ; let bit_index = if cfg ! ( target_endian = "big" ) { 7 - ( index % 8 ) } else { index % 8 } ; let mask = 1 << bit_index ; byte & mask == mask } # [ inline ] pub fn set_bit ( & mut self , index : usize , val : bool ) { debug_assert ! ( index / 8 < self . storage . as_ref ( ) . len ( ) ) ; let byte_index = index / 8 ; let byte = & mut self . storage . as_mut ( ) [ byte_index ] ; let bit_index = if cfg ! ( target_endian = "big" ) { 7 - ( index % 8 ) } else { index % 8 } ; let mask = 1 << bit_index ; if val { * byte |= mask ; } else { * byte &= ! mask ; } } # [ inline ] pub fn get ( & self , bit_offset : usize , bit_width : u8 ) -> u64 { debug_assert ! ( bit_width <= 64 ) ; debug_assert ! ( bit_offset / 8 < self . storage . as_ref ( ) . len ( ) ) ; debug_assert ! ( ( bit_offset + ( bit_width as usize ) ) / 8 <= self . storage . as_ref ( ) . len ( ) ) ; let mut val = 0 ; for i in 0 .. ( bit_width as usize ) { if self . get_bit ( i + bit_offset ) { let index = if cfg ! ( target_endian = "big" ) { bit_width as usize - 1 - i } else { i } ; val |= 1 << index ; } } val } # [ inline ] pub fn set ( & mut self , bit_offset : usize , bit_width : u8 , val : u64 ) { debug_assert ! ( bit_width <= 64 ) ; debug_assert ! ( bit_offset / 8 < self . storage . as_ref ( ) . len ( ) ) ; debug_assert ! ( ( bit_offset + ( bit_width as usize ) ) / 8 <= self . storage . as_ref ( ) . len ( ) ) ; for i in 0 .. ( bit_width as usize ) { let mask = 1 << i ; let val_bit_is_set = val & mask == mask ; let index = if cfg ! ( target_endian = "big" ) { bit_width as usize - 1 - i } else { i } ; self . set_bit ( index + bit_offset , val_bit_is_set ) ; } } } pub const PAPI_PRESET_AND_MASK : u32 = 2147483647 ; pub const PAPI_NATIVE_AND_MASK : u32 = 3221225471 ; pub const PAPI_UE_AND_MASK : u32 = 1073741823 ; pub const PAPI_MAX_PRESET_EVENTS : u32 = 128 ; pub const PAPI_MAX_USER_EVENTS : u32 = 50 ; pub const PAPI_OK : u32 = 0 ; pub const PAPI_EINVAL : i32 = -1 ; pub const PAPI_ENOMEM : i32 = -2 ; pub const PAPI_ESYS : i32 = -3 ; pub const PAPI_ECMP : i32 = -4 ; pub const PAPI_ESBSTR : i32 = -4 ; pub const PAPI_ECLOST : i32 = -5 ; pub const PAPI_EBUG : i32 = -6 ; pub const PAPI_ENOEVNT : i32 = -7 ; pub const PAPI_ECNFLCT : i32 = -8 ; pub const PAPI_ENOTRUN : i32 = -9 ; pub const PAPI_EISRUN : i32 = -10 ; pub const PAPI_ENOEVST : i32 = -11 ; pub const PAPI_ENOTPRESET : i32 = -12 ; pub const PAPI_ENOCNTR : i32 = -13 ; pub const PAPI_EMISC : i32 = -14 ; pub const PAPI_EPERM : i32 = -15 ; pub const PAPI_ENOINIT : i32 = -16 ; pub const PAPI_ENOCMP : i32 = -17 ; pub const PAPI_ENOSUPP : i32 = -18 ; pub const PAPI_ENOIMPL : i32 = -19 ; pub const PAPI_EBUF : i32 = -20 ; pub const PAPI_EINVAL_DOM : i32 = -21 ; pub const PAPI_EATTR : i32 = -22 ; pub const PAPI_ECOUNT : i32 = -23 ; pub const PAPI_ECOMBO : i32 = -24 ; pub const PAPI_ECMP_DISABLED : i32 = -25 ; pub const PAPI_NUM_ERRORS : u32 = 26 ; pub const PAPI_NOT_INITED : u32 = 0 ; pub const PAPI_LOW_LEVEL_INITED : u32 = 1 ; pub const PAPI_HIGH_LEVEL_INITED : u32 = 2 ; pub const PAPI_THREAD_LEVEL_INITED : u32 = 4 ; pub const PAPI_NULL : i32 = -1 ; pub const PAPI_DOM_USER : u32 = 1 ; pub const PAPI_DOM_MIN : u32 = 1 ; pub const PAPI_DOM_KERNEL : u32 = 2 ; pub const PAPI_DOM_OTHER : u32 = 4 ; pub const PAPI_DOM_SUPERVISOR : u32 = 8 ; pub const PAPI_DOM_ALL : u32 = 15 ; pub const PAPI_DOM_MAX : u32 = 15 ; pub const PAPI_DOM_HWSPEC : u32 = 2147483648 ; pub const PAPI_TLS_HIGH_LEVEL : u32 = 2 ; pub const PAPI_NUM_TLS : u32 = 3 ; pub const PAPI_TLS_NUM : u32 = 3 ; pub const PAPI_TLS_ALL_THREADS : u32 = 16 ; pub const PAPI_NUM_LOCK : u32 = 2 ; pub const PAPI_LOCK_NUM : u32 = 2 ; pub const PAPI_VENDOR_UNKNOWN : u32 = 0 ; pub const PAPI_VENDOR_INTEL : u32 = 1 ; pub const PAPI_VENDOR_AMD : u32 = 2 ; pub const PAPI_VENDOR_IBM : u32 = 3 ; pub const PAPI_VENDOR_CRAY : u32 = 4 ; pub const PAPI_VENDOR_SUN : u32 = 5 ; pub const PAPI_VENDOR_FREESCALE : u32 = 6 ; pub const PAPI_VENDOR_ARM : u32 = 7 ; pub const PAPI_VENDOR_MIPS : u32 = 8 ; pub const PAPI_GRN_THR : u32 = 1 ; pub const PAPI_GRN_MIN : u32 = 1 ; pub const PAPI_GRN_PROC : u32 = 2 ; pub const PAPI_GRN_PROCG : u32 = 4 ; pub const PAPI_GRN_SYS : u32 = 8 ; pub const PAPI_GRN_SYS_CPU : u32 = 16 ; pub const PAPI_GRN_MAX : u32 = 16 ; pub const PAPI_STOPPED : u32 = 1 ; pub const PAPI_RUNNING : u32 = 2 ; pub const PAPI_PAUSED : u32 = 4 ; pub const PAPI_NOT_INIT : u32 = 8 ; pub const PAPI_OVERFLOWING : u32 = 16 ; pub const PAPI_PROFILING : u32 = 32 ; pub const PAPI_MULTIPLEXING : u32 = 64 ; pub const PAPI_ATTACHED : u32 = 128 ; pub const PAPI_CPU_ATTACHED : u32 = 256 ; pub const PAPI_QUIET : u32 = 0 ; pub const PAPI_VERB_ECONT : u32 = 1 ; pub const PAPI_VERB_ESTOP : u32 = 2 ; pub const PAPI_PROFIL_POSIX : u32 = 0 ; pub const PAPI_PROFIL_RANDOM : u32 = 1 ; pub const PAPI_PROFIL_WEIGHTED : u32 = 2 ; pub const PAPI_PROFIL_COMPRESS : u32 = 4 ; pub const PAPI_PROFIL_FORCE_SW : u32 = 64 ; pub const PAPI_PROFIL_DATA_EAR : u32 = 128 ; pub const PAPI_PROFIL_INST_EAR : u32 = 256 ; pub const PAPI_PROFIL_BUCKETS : u32 = 56 ; pub const PAPI_OVERFLOW_FORCE_SW : u32 = 64 ; pub const PAPI_OVERFLOW_HARDWARE : u32 = 128 ; pub const PAPI_MULTIPLEX_DEFAULT : u32 = 0 ; pub const PAPI_MULTIPLEX_FORCE_SW : u32 = 1 ; pub const PAPI_INHERIT_ALL : u32 = 1 ; pub const PAPI_INHERIT_NONE : u32 = 0 ; pub const PAPI_DETACH : u32 = 1 ; pub const PAPI_DEBUG : u32 = 2 ; pub const PAPI_MULTIPLEX : u32 = 3 ; pub const PAPI_DEFDOM : u32 = 4 ; pub const PAPI_DOMAIN : u32 = 5 ; pub const PAPI_DEFGRN : u32 = 6 ; pub const PAPI_GRANUL : u32 = 7 ; pub const PAPI_DEF_MPX_NS : u32 = 8 ; pub const PAPI_MAX_MPX_CTRS : u32 = 11 ; pub const PAPI_PROFIL : u32 = 12 ; pub const PAPI_PRELOAD : u32 = 13 ; pub const PAPI_CLOCKRATE : u32 = 14 ; pub const PAPI_MAX_HWCTRS : u32 = 15 ; pub const PAPI_HWINFO : u32 = 16 ; pub const PAPI_EXEINFO : u32 = 17 ; pub const PAPI_MAX_CPUS : u32 = 18 ; pub const PAPI_ATTACH : u32 = 19 ; pub const PAPI_SHLIBINFO : u32 = 20 ; pub const PAPI_LIB_VERSION : u32 = 21 ; pub const PAPI_COMPONENTINFO : u32 = 22 ; pub const PAPI_DATA_ADDRESS : u32 = 23 ; pub const PAPI_INSTR_ADDRESS : u32 = 24 ; pub const PAPI_DEF_ITIMER : u32 = 25 ; pub const PAPI_DEF_ITIMER_NS : u32 = 26 ; pub const PAPI_CPU_ATTACH : u32 = 27 ; pub const PAPI_INHERIT : u32 = 28 ; pub const PAPI_USER_EVENTS_FILE : u32 = 29 ; pub const PAPI_INIT_SLOTS : u32 = 64 ; pub const PAPI_MIN_STR_LEN : u32 = 64 ; pub const PAPI_MAX_STR_LEN : u32 = 128 ; pub const PAPI_HUGE_STR_LEN : u32 = 1024 ; pub const PAPI_PMU_MAX : u32 = 40 ; pub const PAPI_DERIVED : u32 = 1 ; pub const PAPI_NTV_GROUP_AND_MASK : u32 = 16711680 ; pub const PAPI_NTV_GROUP_SHIFT : u32 = 16 ; pub const PAPI_MH_TYPE_EMPTY : u32 = 0 ; pub const PAPI_MH_TYPE_INST : u32 = 1 ; pub const PAPI_MH_TYPE_DATA : u32 = 2 ; pub const PAPI_MH_TYPE_VECTOR : u32 = 4 ; pub const PAPI_MH_TYPE_TRACE : u32 = 8 ; pub const PAPI_MH_TYPE_UNIFIED : u32 = 3 ; pub const PAPI_MH_TYPE_WT : u32 = 0 ; pub const PAPI_MH_TYPE_WB : u32 = 16 ; pub const PAPI_MH_TYPE_UNKNOWN : u32 = 0 ; pub const PAPI_MH_TYPE_LRU : u32 = 256 ; pub const PAPI_MH_TYPE_PSEUDO_LRU : u32 = 512 ; pub const PAPI_MH_TYPE_TLB : u32 = 4096 ; pub const PAPI_MH_TYPE_PREF : u32 = 8192 ; pub const PAPI_MH_MAX_LEVELS : u32 = 6 ; pub const PAPI_MAX_MEM_HIERARCHY_LEVELS : u32 = 4 ; pub const PAPI_MAX_INFO_TERMS : u32 = 12 ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type caddr_t = __caddr_t ; pub const PAPI_L1_DCM_idx : _bindgen_ty_1 = 0 ; pub const PAPI_L1_ICM_idx : _bindgen_ty_1 = 1 ; pub const PAPI_L2_DCM_idx : _bindgen_ty_1 = 2 ; pub const PAPI_L2_ICM_idx : _bindgen_ty_1 = 3 ; pub const PAPI_L3_DCM_idx : _bindgen_ty_1 = 4 ; pub const PAPI_L3_ICM_idx : _bindgen_ty_1 = 5 ; pub const PAPI_L1_TCM_idx : _bindgen_ty_1 = 6 ; pub const PAPI_L2_TCM_idx : _bindgen_ty_1 = 7 ; pub const PAPI_L3_TCM_idx : _bindgen_ty_1 = 8 ; pub const PAPI_CA_SNP_idx : _bindgen_ty_1 = 9 ; pub const PAPI_CA_SHR_idx : _bindgen_ty_1 = 10 ; pub const PAPI_CA_CLN_idx : _bindgen_ty_1 = 11 ; pub const PAPI_CA_INV_idx : _bindgen_ty_1 = 12 ; pub const PAPI_CA_ITV_idx : _bindgen_ty_1 = 13 ; pub const PAPI_L3_LDM_idx : _bindgen_ty_1 = 14 ; pub const PAPI_L3_STM_idx : _bindgen_ty_1 = 15 ; pub const PAPI_BRU_IDL_idx : _bindgen_ty_1 = 16 ; pub const PAPI_FXU_IDL_idx : _bindgen_ty_1 = 17 ; pub const PAPI_FPU_IDL_idx : _bindgen_ty_1 = 18 ; pub const PAPI_LSU_IDL_idx : _bindgen_ty_1 = 19 ; pub const PAPI_TLB_DM_idx : _bindgen_ty_1 = 20 ; pub const PAPI_TLB_IM_idx : _bindgen_ty_1 = 21 ; pub const PAPI_TLB_TL_idx : _bindgen_ty_1 = 22 ; pub const PAPI_L1_LDM_idx : _bindgen_ty_1 = 23 ; pub const PAPI_L1_STM_idx : _bindgen_ty_1 = 24 ; pub const PAPI_L2_LDM_idx : _bindgen_ty_1 = 25 ; pub const PAPI_L2_STM_idx : _bindgen_ty_1 = 26 ; pub const PAPI_BTAC_M_idx : _bindgen_ty_1 = 27 ; pub const PAPI_PRF_DM_idx : _bindgen_ty_1 = 28 ; pub const PAPI_L3_DCH_idx : _bindgen_ty_1 = 29 ; pub const PAPI_TLB_SD_idx : _bindgen_ty_1 = 30 ; pub const PAPI_CSR_FAL_idx : _bindgen_ty_1 = 31 ; pub const PAPI_CSR_SUC_idx : _bindgen_ty_1 = 32 ; pub const PAPI_CSR_TOT_idx : _bindgen_ty_1 = 33 ; pub const PAPI_MEM_SCY_idx : _bindgen_ty_1 = 34 ; pub const PAPI_MEM_RCY_idx : _bindgen_ty_1 = 35 ; pub const PAPI_MEM_WCY_idx : _bindgen_ty_1 = 36 ; pub const PAPI_STL_ICY_idx : _bindgen_ty_1 = 37 ; pub const PAPI_FUL_ICY_idx : _bindgen_ty_1 = 38 ; pub const PAPI_STL_CCY_idx : _bindgen_ty_1 = 39 ; pub const PAPI_FUL_CCY_idx : _bindgen_ty_1 = 40 ; pub const PAPI_HW_INT_idx : _bindgen_ty_1 = 41 ; pub const PAPI_BR_UCN_idx : _bindgen_ty_1 = 42 ; pub const PAPI_BR_CN_idx : _bindgen_ty_1 = 43 ; pub const PAPI_BR_TKN_idx : _bindgen_ty_1 = 44 ; pub const PAPI_BR_NTK_idx : _bindgen_ty_1 = 45 ; pub const PAPI_BR_MSP_idx : _bindgen_ty_1 = 46 ; pub const PAPI_BR_PRC_idx : _bindgen_ty_1 = 47 ; pub const PAPI_FMA_INS_idx : _bindgen_ty_1 = 48 ; pub const PAPI_TOT_IIS_idx : _bindgen_ty_1 = 49 ; pub const PAPI_TOT_INS_idx : _bindgen_ty_1 = 50 ; pub const PAPI_INT_INS_idx : _bindgen_ty_1 = 51 ; pub const PAPI_FP_INS_idx : _bindgen_ty_1 = 52 ; pub const PAPI_LD_INS_idx : _bindgen_ty_1 = 53 ; pub const PAPI_SR_INS_idx : _bindgen_ty_1 = 54 ; pub const PAPI_BR_INS_idx : _bindgen_ty_1 = 55 ; pub const PAPI_VEC_INS_idx : _bindgen_ty_1 = 56 ; pub const PAPI_RES_STL_idx : _bindgen_ty_1 = 57 ; pub const PAPI_FP_STAL_idx : _bindgen_ty_1 = 58 ; pub const PAPI_TOT_CYC_idx : _bindgen_ty_1 = 59 ; pub const PAPI_LST_INS_idx : _bindgen_ty_1 = 60 ; pub const PAPI_SYC_INS_idx : _bindgen_ty_1 = 61 ; pub const PAPI_L1_DCH_idx : _bindgen_ty_1 = 62 ; pub const PAPI_L2_DCH_idx : _bindgen_ty_1 = 63 ; pub const PAPI_L1_DCA_idx : _bindgen_ty_1 = 64 ; pub const PAPI_L2_DCA_idx : _bindgen_ty_1 = 65 ; pub const PAPI_L3_DCA_idx : _bindgen_ty_1 = 66 ; pub const PAPI_L1_DCR_idx : _bindgen_ty_1 = 67 ; pub const PAPI_L2_DCR_idx : _bindgen_ty_1 = 68 ; pub const PAPI_L3_DCR_idx : _bindgen_ty_1 = 69 ; pub const PAPI_L1_DCW_idx : _bindgen_ty_1 = 70 ; pub const PAPI_L2_DCW_idx : _bindgen_ty_1 = 71 ; pub const PAPI_L3_DCW_idx : _bindgen_ty_1 = 72 ; pub const PAPI_L1_ICH_idx : _bindgen_ty_1 = 73 ; pub const PAPI_L2_ICH_idx : _bindgen_ty_1 = 74 ; pub const PAPI_L3_ICH_idx : _bindgen_ty_1 = 75 ; pub const PAPI_L1_ICA_idx : _bindgen_ty_1 = 76 ; pub const PAPI_L2_ICA_idx : _bindgen_ty_1 = 77 ; pub const PAPI_L3_ICA_idx : _bindgen_ty_1 = 78 ; pub const PAPI_L1_ICR_idx : _bindgen_ty_1 = 79 ; pub const PAPI_L2_ICR_idx : _bindgen_ty_1 = 80 ; pub const PAPI_L3_ICR_idx : _bindgen_ty_1 = 81 ; pub const PAPI_L1_ICW_idx : _bindgen_ty_1 = 82 ; pub const PAPI_L2_ICW_idx : _bindgen_ty_1 = 83 ; pub const PAPI_L3_ICW_idx : _bindgen_ty_1 = 84 ; pub const PAPI_L1_TCH_idx : _bindgen_ty_1 = 85 ; pub const PAPI_L2_TCH_idx : _bindgen_ty_1 = 86 ; pub const PAPI_L3_TCH_idx : _bindgen_ty_1 = 87 ; pub const PAPI_L1_TCA_idx : _bindgen_ty_1 = 88 ; pub const PAPI_L2_TCA_idx : _bindgen_ty_1 = 89 ; pub const PAPI_L3_TCA_idx : _bindgen_ty_1 = 90 ; pub const PAPI_L1_TCR_idx : _bindgen_ty_1 = 91 ; pub const PAPI_L2_TCR_idx : _bindgen_ty_1 = 92 ; pub const PAPI_L3_TCR_idx : _bindgen_ty_1 = 93 ; pub const PAPI_L1_TCW_idx : _bindgen_ty_1 = 94 ; pub const PAPI_L2_TCW_idx : _bindgen_ty_1 = 95 ; pub const PAPI_L3_TCW_idx : _bindgen_ty_1 = 96 ; pub const PAPI_FML_INS_idx : _bindgen_ty_1 = 97 ; pub const PAPI_FAD_INS_idx : _bindgen_ty_1 = 98 ; pub const PAPI_FDV_INS_idx : _bindgen_ty_1 = 99 ; pub const PAPI_FSQ_INS_idx : _bindgen_ty_1 = 100 ; pub const PAPI_FNV_INS_idx : _bindgen_ty_1 = 101 ; pub const PAPI_FP_OPS_idx : _bindgen_ty_1 = 102 ; pub const PAPI_SP_OPS_idx : _bindgen_ty_1 = 103 ; pub const PAPI_DP_OPS_idx : _bindgen_ty_1 = 104 ; pub const PAPI_VEC_SP_idx : _bindgen_ty_1 = 105 ; pub const PAPI_VEC_DP_idx : _bindgen_ty_1 = 106 ; pub const PAPI_REF_CYC_idx : _bindgen_ty_1 = 107 ; pub const PAPI_END_idx : _bindgen_ty_1 = 108 ; pub type _bindgen_ty_1 = u32 ; pub const PAPI_ENUM_EVENTS : _bindgen_ty_2 = 0 ; pub const PAPI_ENUM_FIRST : _bindgen_ty_2 = 1 ; pub const PAPI_PRESET_ENUM_AVAIL : _bindgen_ty_2 = 2 ; pub const PAPI_PRESET_ENUM_MSC : _bindgen_ty_2 = 3 ; pub const PAPI_PRESET_ENUM_INS : _bindgen_ty_2 = 4 ; pub const PAPI_PRESET_ENUM_IDL : _bindgen_ty_2 = 5 ; pub const PAPI_PRESET_ENUM_BR : _bindgen_ty_2 = 6 ; pub const PAPI_PRESET_ENUM_CND : _bindgen_ty_2 = 7 ; pub const PAPI_PRESET_ENUM_MEM : _bindgen_ty_2 = 8 ; pub const PAPI_PRESET_ENUM_CACH : _bindgen_ty_2 = 9 ; pub const PAPI_PRESET_ENUM_L1 : _bindgen_ty_2 = 10 ; pub const PAPI_PRESET_ENUM_L2 : _bindgen_ty_2 = 11 ; pub const PAPI_PRESET_ENUM_L3 : _bindgen_ty_2 = 12 ; pub const PAPI_PRESET_ENUM_TLB : _bindgen_ty_2 = 13 ; pub const PAPI_PRESET_ENUM_FP : _bindgen_ty_2 = 14 ; pub const PAPI_NTV_ENUM_UMASKS : _bindgen_ty_2 = 15 ; pub const PAPI_NTV_ENUM_UMASK_COMBOS : _bindgen_ty_2 = 16 ; pub const PAPI_NTV_ENUM_IARR : _bindgen_ty_2 = 17 ; pub const PAPI_NTV_ENUM_DARR : _bindgen_ty_2 = 18 ; pub const PAPI_NTV_ENUM_OPCM : _bindgen_ty_2 = 19 ; pub const PAPI_NTV_ENUM_IEAR : _bindgen_ty_2 = 20 ; pub const PAPI_NTV_ENUM_DEAR : _bindgen_ty_2 = 21 ; pub const PAPI_NTV_ENUM_GROUPS : _bindgen_ty_2 = 22 ; pub type _bindgen_ty_2 = u32 ; pub type PAPI_thread_id_t = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_all_thr_spec { pub num : :: std :: os :: raw :: c_int , pub id : * mut PAPI_thread_id_t , pub data : * mut * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__papi_all_thr_spec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_all_thr_spec > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _papi_all_thr_spec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_all_thr_spec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_all_thr_spec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_all_thr_spec > ( ) ) ) . num as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_all_thr_spec ) , "::" , stringify ! ( num ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_all_thr_spec > ( ) ) ) . id as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_all_thr_spec ) , "::" , stringify ! ( id ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_all_thr_spec > ( ) ) ) . data as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _papi_all_thr_spec ) , "::" , stringify ! ( data ) ) ) ; } pub type PAPI_all_thr_spec_t = _papi_all_thr_spec ; pub type PAPI_overflow_handler_t = :: std :: option :: Option < unsafe extern "C" fn ( EventSet : :: std :: os :: raw :: c_int , address : * mut :: std :: os :: raw :: c_void , overflow_vector : :: std :: os :: raw :: c_longlong , context : * mut :: std :: os :: raw :: c_void ) > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_sprofil { pub pr_base : * mut :: std :: os :: raw :: c_void , pub pr_size : :: std :: os :: raw :: c_uint , pub pr_off : caddr_t , pub pr_scale : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout__papi_sprofil ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_sprofil > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _papi_sprofil ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_sprofil > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_sprofil ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_sprofil > ( ) ) ) . pr_base as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_sprofil ) , "::" , stringify ! ( pr_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_sprofil > ( ) ) ) . pr_size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_sprofil ) , "::" , stringify ! ( pr_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_sprofil > ( ) ) ) . pr_off as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _papi_sprofil ) , "::" , stringify ! ( pr_off ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_sprofil > ( ) ) ) . pr_scale as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _papi_sprofil ) , "::" , stringify ! ( pr_scale ) ) ) ; } pub type PAPI_sprofil_t = _papi_sprofil ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_itimer_option { pub itimer_num : :: std :: os :: raw :: c_int , pub itimer_sig : :: std :: os :: raw :: c_int , pub ns : :: std :: os :: raw :: c_int , pub flags : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_itimer_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_itimer_option > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _papi_itimer_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_itimer_option > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_itimer_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_itimer_option > ( ) ) ) . itimer_num as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_itimer_option ) , "::" , stringify ! ( itimer_num ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_itimer_option > ( ) ) ) . itimer_sig as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_itimer_option ) , "::" , stringify ! ( itimer_sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_itimer_option > ( ) ) ) . ns as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_itimer_option ) , "::" , stringify ! ( ns ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_itimer_option > ( ) ) ) . flags as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _papi_itimer_option ) , "::" , stringify ! ( flags ) ) ) ; } pub type PAPI_itimer_option_t = _papi_itimer_option ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_inherit_option { pub eventset : :: std :: os :: raw :: c_int , pub inherit : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_inherit_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_inherit_option > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _papi_inherit_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_inherit_option > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_inherit_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_inherit_option > ( ) ) ) . eventset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_inherit_option ) , "::" , stringify ! ( eventset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_inherit_option > ( ) ) ) . inherit as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_inherit_option ) , "::" , stringify ! ( inherit ) ) ) ; } pub type PAPI_inherit_option_t = _papi_inherit_option ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_domain_option { pub def_cidx : :: std :: os :: raw :: c_int , pub eventset : :: std :: os :: raw :: c_int , pub domain : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_domain_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_domain_option > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( _papi_domain_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_domain_option > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_domain_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_domain_option > ( ) ) ) . def_cidx as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_domain_option ) , "::" , stringify ! ( def_cidx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_domain_option > ( ) ) ) . eventset as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_domain_option ) , "::" , stringify ! ( eventset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_domain_option > ( ) ) ) . domain as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_domain_option ) , "::" , stringify ! ( domain ) ) ) ; } pub type PAPI_domain_option_t = _papi_domain_option ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_granularity_option { pub def_cidx : :: std :: os :: raw :: c_int , pub eventset : :: std :: os :: raw :: c_int , pub granularity : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_granularity_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_granularity_option > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( _papi_granularity_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_granularity_option > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_granularity_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_granularity_option > ( ) ) ) . def_cidx as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_granularity_option ) , "::" , stringify ! ( def_cidx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_granularity_option > ( ) ) ) . eventset as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_granularity_option ) , "::" , stringify ! ( eventset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_granularity_option > ( ) ) ) . granularity as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_granularity_option ) , "::" , stringify ! ( granularity ) ) ) ; } pub type PAPI_granularity_option_t = _papi_granularity_option ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _papi_preload_option { pub lib_preload_env : [ :: std :: os :: raw :: c_char ; 128usize ] , pub lib_preload_sep : :: std :: os :: raw :: c_char , pub lib_dir_env : [ :: std :: os :: raw :: c_char ; 128usize ] , pub lib_dir_sep : :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout__papi_preload_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_preload_option > ( ) , 258usize , concat ! ( "Size of: " , stringify ! ( _papi_preload_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_preload_option > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( _papi_preload_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_preload_option > ( ) ) ) . lib_preload_env as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_preload_option ) , "::" , stringify ! ( lib_preload_env ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_preload_option > ( ) ) ) . lib_preload_sep as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( _papi_preload_option ) , "::" , stringify ! ( lib_preload_sep ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_preload_option > ( ) ) ) . lib_dir_env as * const _ as usize } , 129usize , concat ! ( "Offset of field: " , stringify ! ( _papi_preload_option ) , "::" , stringify ! ( lib_dir_env ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_preload_option > ( ) ) ) . lib_dir_sep as * const _ as usize } , 257usize , concat ! ( "Offset of field: " , stringify ! ( _papi_preload_option ) , "::" , stringify ! ( lib_dir_sep ) ) ) ; } pub type PAPI_preload_info_t = _papi_preload_option ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _papi_component_option { pub name : [ :: std :: os :: raw :: c_char ; 128usize ] , pub short_name : [ :: std :: os :: raw :: c_char ; 64usize ] , pub description : [ :: std :: os :: raw :: c_char ; 128usize ] , pub version : [ :: std :: os :: raw :: c_char ; 64usize ] , pub support_version : [ :: std :: os :: raw :: c_char ; 64usize ] , pub kernel_version : [ :: std :: os :: raw :: c_char ; 64usize ] , pub disabled_reason : [ :: std :: os :: raw :: c_char ; 128usize ] , pub disabled : :: std :: os :: raw :: c_int , pub CmpIdx : :: std :: os :: raw :: c_int , pub num_cntrs : :: std :: os :: raw :: c_int , pub num_mpx_cntrs : :: std :: os :: raw :: c_int , pub num_preset_events : :: std :: os :: raw :: c_int , pub num_native_events : :: std :: os :: raw :: c_int , pub default_domain : :: std :: os :: raw :: c_int , pub available_domains : :: std :: os :: raw :: c_int , pub default_granularity : :: std :: os :: raw :: c_int , pub available_granularities : :: std :: os :: raw :: c_int , pub hardware_intr_sig : :: std :: os :: raw :: c_int , pub component_type : :: std :: os :: raw :: c_int , pub pmu_names : [ * mut :: std :: os :: raw :: c_char ; 40usize ] , pub reserved : [ :: std :: os :: raw :: c_int ; 8usize ] , pub _bitfield_1 : __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > , pub __bindgen_padding_0 : u32 , } # [ test ] fn bindgen_test_layout__papi_component_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_component_option > ( ) , 1048usize , concat ! ( "Size of: " , stringify ! ( _papi_component_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_component_option > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_component_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . name as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . short_name as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( short_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . description as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( description ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . version as * const _ as usize } , 320usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( version ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . support_version as * const _ as usize } , 384usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( support_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . kernel_version as * const _ as usize } , 448usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( kernel_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . disabled_reason as * const _ as usize } , 512usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( disabled_reason ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . disabled as * const _ as usize } , 640usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( disabled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . CmpIdx as * const _ as usize } , 644usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( CmpIdx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . num_cntrs as * const _ as usize } , 648usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( num_cntrs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . num_mpx_cntrs as * const _ as usize } , 652usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( num_mpx_cntrs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . num_preset_events as * const _ as usize } , 656usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( num_preset_events ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . num_native_events as * const _ as usize } , 660usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( num_native_events ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . default_domain as * const _ as usize } , 664usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( default_domain ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . available_domains as * const _ as usize } , 668usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( available_domains ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . default_granularity as * const _ as usize } , 672usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( default_granularity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . available_granularities as * const _ as usize } , 676usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( available_granularities ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . hardware_intr_sig as * const _ as usize } , 680usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( hardware_intr_sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . component_type as * const _ as usize } , 684usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( component_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . pmu_names as * const _ as usize } , 688usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( pmu_names ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_component_option > ( ) ) ) . reserved as * const _ as usize } , 1008usize , concat ! ( "Offset of field: " , stringify ! ( _papi_component_option ) , "::" , stringify ! ( reserved ) ) ) ; } impl _papi_component_option { # [ inline ] pub fn hardware_intr ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 0usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_hardware_intr ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 0usize , 1u8 , val as u64 ) } } # [ inline ] pub fn precise_intr ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 1usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_precise_intr ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 1usize , 1u8 , val as u64 ) } } # [ inline ] pub fn posix1b_timers ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 2usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_posix1b_timers ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 2usize , 1u8 , val as u64 ) } } # [ inline ] pub fn kernel_profile ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 3usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_kernel_profile ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 3usize , 1u8 , val as u64 ) } } # [ inline ] pub fn kernel_multiplex ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 4usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_kernel_multiplex ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 4usize , 1u8 , val as u64 ) } } # [ inline ] pub fn fast_counter_read ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 5usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_fast_counter_read ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 5usize , 1u8 , val as u64 ) } } # [ inline ] pub fn fast_real_timer ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 6usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_fast_real_timer ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 6usize , 1u8 , val as u64 ) } } # [ inline ] pub fn fast_virtual_timer ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 7usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_fast_virtual_timer ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 7usize , 1u8 , val as u64 ) } } # [ inline ] pub fn attach ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 8usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_attach ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 8usize , 1u8 , val as u64 ) } } # [ inline ] pub fn attach_must_ptrace ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 9usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_attach_must_ptrace ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 9usize , 1u8 , val as u64 ) } } # [ inline ] pub fn cntr_umasks ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 10usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_cntr_umasks ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 10usize , 1u8 , val as u64 ) } } # [ inline ] pub fn cpu ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 11usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_cpu ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 11usize , 1u8 , val as u64 ) } } # [ inline ] pub fn inherit ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 12usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_inherit ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 12usize , 1u8 , val as u64 ) } } # [ inline ] pub fn reserved_bits ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 13usize , 12u8 ) as u32 ) } } # [ inline ] pub fn set_reserved_bits ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 13usize , 12u8 , val as u64 ) } } # [ inline ] pub fn new_bitfield_1 ( hardware_intr : :: std :: os :: raw :: c_uint , precise_intr : :: std :: os :: raw :: c_uint , posix1b_timers : :: std :: os :: raw :: c_uint , kernel_profile : :: std :: os :: raw :: c_uint , kernel_multiplex : :: std :: os :: raw :: c_uint , fast_counter_read : :: std :: os :: raw :: c_uint , fast_real_timer : :: std :: os :: raw :: c_uint , fast_virtual_timer : :: std :: os :: raw :: c_uint , attach : :: std :: os :: raw :: c_uint , attach_must_ptrace : :: std :: os :: raw :: c_uint , cntr_umasks : :: std :: os :: raw :: c_uint , cpu : :: std :: os :: raw :: c_uint , inherit : :: std :: os :: raw :: c_uint , reserved_bits : :: std :: os :: raw :: c_uint ) -> __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > = Default :: default ( ) ; __bindgen_bitfield_unit . set ( 0usize , 1u8 , { let hardware_intr : u32 = unsafe { :: std :: mem :: transmute ( hardware_intr ) } ; hardware_intr as u64 } ) ; __bindgen_bitfield_unit . set ( 1usize , 1u8 , { let precise_intr : u32 = unsafe { :: std :: mem :: transmute ( precise_intr ) } ; precise_intr as u64 } ) ; __bindgen_bitfield_unit . set ( 2usize , 1u8 , { let posix1b_timers : u32 = unsafe { :: std :: mem :: transmute ( posix1b_timers ) } ; posix1b_timers as u64 } ) ; __bindgen_bitfield_unit . set ( 3usize , 1u8 , { let kernel_profile : u32 = unsafe { :: std :: mem :: transmute ( kernel_profile ) } ; kernel_profile as u64 } ) ; __bindgen_bitfield_unit . set ( 4usize , 1u8 , { let kernel_multiplex : u32 = unsafe { :: std :: mem :: transmute ( kernel_multiplex ) } ; kernel_multiplex as u64 } ) ; __bindgen_bitfield_unit . set ( 5usize , 1u8 , { let fast_counter_read : u32 = unsafe { :: std :: mem :: transmute ( fast_counter_read ) } ; fast_counter_read as u64 } ) ; __bindgen_bitfield_unit . set ( 6usize , 1u8 , { let fast_real_timer : u32 = unsafe { :: std :: mem :: transmute ( fast_real_timer ) } ; fast_real_timer as u64 } ) ; __bindgen_bitfield_unit . set ( 7usize , 1u8 , { let fast_virtual_timer : u32 = unsafe { :: std :: mem :: transmute ( fast_virtual_timer ) } ; fast_virtual_timer as u64 } ) ; __bindgen_bitfield_unit . set ( 8usize , 1u8 , { let attach : u32 = unsafe { :: std :: mem :: transmute ( attach ) } ; attach as u64 } ) ; __bindgen_bitfield_unit . set ( 9usize , 1u8 , { let attach_must_ptrace : u32 = unsafe { :: std :: mem :: transmute ( attach_must_ptrace ) } ; attach_must_ptrace as u64 } ) ; __bindgen_bitfield_unit . set ( 10usize , 1u8 , { let cntr_umasks : u32 = unsafe { :: std :: mem :: transmute ( cntr_umasks ) } ; cntr_umasks as u64 } ) ; __bindgen_bitfield_unit . set ( 11usize , 1u8 , { let cpu : u32 = unsafe { :: std :: mem :: transmute ( cpu ) } ; cpu as u64 } ) ; __bindgen_bitfield_unit . set ( 12usize , 1u8 , { let inherit : u32 = unsafe { :: std :: mem :: transmute ( inherit ) } ; inherit as u64 } ) ; __bindgen_bitfield_unit . set ( 13usize , 12u8 , { let reserved_bits : u32 = unsafe { :: std :: mem :: transmute ( reserved_bits ) } ; reserved_bits as u64 } ) ; __bindgen_bitfield_unit } } pub type PAPI_component_info_t = _papi_component_option ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_mpx_info { pub timer_sig : :: std :: os :: raw :: c_int , pub timer_num : :: std :: os :: raw :: c_int , pub timer_us : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_mpx_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_mpx_info > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( _papi_mpx_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_mpx_info > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_mpx_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mpx_info > ( ) ) ) . timer_sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mpx_info ) , "::" , stringify ! ( timer_sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mpx_info > ( ) ) ) . timer_num as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mpx_info ) , "::" , stringify ! ( timer_num ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mpx_info > ( ) ) ) . timer_us as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mpx_info ) , "::" , stringify ! ( timer_us ) ) ) ; } pub type PAPI_mpx_info_t = _papi_mpx_info ; pub type PAPI_debug_handler_t = :: std :: option :: Option < unsafe extern "C" fn ( code : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_debug_option { pub level : :: std :: os :: raw :: c_int , pub handler : PAPI_debug_handler_t , } # [ test ] fn bindgen_test_layout__papi_debug_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_debug_option > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _papi_debug_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_debug_option > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_debug_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_debug_option > ( ) ) ) . level as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_debug_option ) , "::" , stringify ! ( level ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_debug_option > ( ) ) ) . handler as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_debug_option ) , "::" , stringify ! ( handler ) ) ) ; } pub type PAPI_debug_option_t = _papi_debug_option ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _papi_address_map { pub name : [ :: std :: os :: raw :: c_char ; 1024usize ] , pub text_start : caddr_t , pub text_end : caddr_t , pub data_start : caddr_t , pub data_end : caddr_t , pub bss_start : caddr_t , pub bss_end : caddr_t , } # [ test ] fn bindgen_test_layout__papi_address_map ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_address_map > ( ) , 1072usize , concat ! ( "Size of: " , stringify ! ( _papi_address_map ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_address_map > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_address_map ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_address_map > ( ) ) ) . name as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_address_map ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_address_map > ( ) ) ) . text_start as * const _ as usize } , 1024usize , concat ! ( "Offset of field: " , stringify ! ( _papi_address_map ) , "::" , stringify ! ( text_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_address_map > ( ) ) ) . text_end as * const _ as usize } , 1032usize , concat ! ( "Offset of field: " , stringify ! ( _papi_address_map ) , "::" , stringify ! ( text_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_address_map > ( ) ) ) . data_start as * const _ as usize } , 1040usize , concat ! ( "Offset of field: " , stringify ! ( _papi_address_map ) , "::" , stringify ! ( data_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_address_map > ( ) ) ) . data_end as * const _ as usize } , 1048usize , concat ! ( "Offset of field: " , stringify ! ( _papi_address_map ) , "::" , stringify ! ( data_end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_address_map > ( ) ) ) . bss_start as * const _ as usize } , 1056usize , concat ! ( "Offset of field: " , stringify ! ( _papi_address_map ) , "::" , stringify ! ( bss_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_address_map > ( ) ) ) . bss_end as * const _ as usize } , 1064usize , concat ! ( "Offset of field: " , stringify ! ( _papi_address_map ) , "::" , stringify ! ( bss_end ) ) ) ; } pub type PAPI_address_map_t = _papi_address_map ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _papi_program_info { pub fullname : [ :: std :: os :: raw :: c_char ; 1024usize ] , pub address_info : PAPI_address_map_t , } # [ test ] fn bindgen_test_layout__papi_program_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_program_info > ( ) , 2096usize , concat ! ( "Size of: " , stringify ! ( _papi_program_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_program_info > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_program_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_program_info > ( ) ) ) . fullname as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_program_info ) , "::" , stringify ! ( fullname ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_program_info > ( ) ) ) . address_info as * const _ as usize } , 1024usize , concat ! ( "Offset of field: " , stringify ! ( _papi_program_info ) , "::" , stringify ! ( address_info ) ) ) ; } pub type PAPI_exe_info_t = _papi_program_info ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_shared_lib_info { pub map : * mut PAPI_address_map_t , pub count : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_shared_lib_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_shared_lib_info > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _papi_shared_lib_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_shared_lib_info > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_shared_lib_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_shared_lib_info > ( ) ) ) . map as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_shared_lib_info ) , "::" , stringify ! ( map ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_shared_lib_info > ( ) ) ) . count as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_shared_lib_info ) , "::" , stringify ! ( count ) ) ) ; } pub type PAPI_shlib_info_t = _papi_shared_lib_info ; pub type PAPI_user_defined_events_file_t = * mut :: std :: os :: raw :: c_char ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_mh_tlb_info { pub type_ : :: std :: os :: raw :: c_int , pub num_entries : :: std :: os :: raw :: c_int , pub page_size : :: std :: os :: raw :: c_int , pub associativity : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_mh_tlb_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_mh_tlb_info > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _papi_mh_tlb_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_mh_tlb_info > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_mh_tlb_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_tlb_info > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_tlb_info ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_tlb_info > ( ) ) ) . num_entries as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_tlb_info ) , "::" , stringify ! ( num_entries ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_tlb_info > ( ) ) ) . page_size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_tlb_info ) , "::" , stringify ! ( page_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_tlb_info > ( ) ) ) . associativity as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_tlb_info ) , "::" , stringify ! ( associativity ) ) ) ; } pub type PAPI_mh_tlb_info_t = _papi_mh_tlb_info ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_mh_cache_info { pub type_ : :: std :: os :: raw :: c_int , pub size : :: std :: os :: raw :: c_int , pub line_size : :: std :: os :: raw :: c_int , pub num_lines : :: std :: os :: raw :: c_int , pub associativity : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_mh_cache_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_mh_cache_info > ( ) , 20usize , concat ! ( "Size of: " , stringify ! ( _papi_mh_cache_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_mh_cache_info > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_mh_cache_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_cache_info > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_cache_info ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_cache_info > ( ) ) ) . size as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_cache_info ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_cache_info > ( ) ) ) . line_size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_cache_info ) , "::" , stringify ! ( line_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_cache_info > ( ) ) ) . num_lines as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_cache_info ) , "::" , stringify ! ( num_lines ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_cache_info > ( ) ) ) . associativity as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_cache_info ) , "::" , stringify ! ( associativity ) ) ) ; } pub type PAPI_mh_cache_info_t = _papi_mh_cache_info ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_mh_level_info { pub tlb : [ PAPI_mh_tlb_info_t ; 6usize ] , pub cache : [ PAPI_mh_cache_info_t ; 6usize ] , } # [ test ] fn bindgen_test_layout__papi_mh_level_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_mh_level_info > ( ) , 216usize , concat ! ( "Size of: " , stringify ! ( _papi_mh_level_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_mh_level_info > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_mh_level_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_level_info > ( ) ) ) . tlb as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_level_info ) , "::" , stringify ! ( tlb ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_level_info > ( ) ) ) . cache as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_level_info ) , "::" , stringify ! ( cache ) ) ) ; } pub type PAPI_mh_level_t = _papi_mh_level_info ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_mh_info { pub levels : :: std :: os :: raw :: c_int , pub level : [ PAPI_mh_level_t ; 4usize ] , } # [ test ] fn bindgen_test_layout__papi_mh_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_mh_info > ( ) , 868usize , concat ! ( "Size of: " , stringify ! ( _papi_mh_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_mh_info > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_mh_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_info > ( ) ) ) . levels as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_info ) , "::" , stringify ! ( levels ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_mh_info > ( ) ) ) . level as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_mh_info ) , "::" , stringify ! ( level ) ) ) ; } pub type PAPI_mh_info_t = _papi_mh_info ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _papi_hw_info { pub ncpu : :: std :: os :: raw :: c_int , pub threads : :: std :: os :: raw :: c_int , pub cores : :: std :: os :: raw :: c_int , pub sockets : :: std :: os :: raw :: c_int , pub nnodes : :: std :: os :: raw :: c_int , pub totalcpus : :: std :: os :: raw :: c_int , pub vendor : :: std :: os :: raw :: c_int , pub vendor_string : [ :: std :: os :: raw :: c_char ; 128usize ] , pub model : :: std :: os :: raw :: c_int , pub model_string : [ :: std :: os :: raw :: c_char ; 128usize ] , pub revision : f32 , pub cpuid_family : :: std :: os :: raw :: c_int , pub cpuid_model : :: std :: os :: raw :: c_int , pub cpuid_stepping : :: std :: os :: raw :: c_int , pub cpu_max_mhz : :: std :: os :: raw :: c_int , pub cpu_min_mhz : :: std :: os :: raw :: c_int , pub mem_hierarchy : PAPI_mh_info_t , pub virtualized : :: std :: os :: raw :: c_int , pub virtual_vendor_string : [ :: std :: os :: raw :: c_char ; 128usize ] , pub virtual_vendor_version : [ :: std :: os :: raw :: c_char ; 128usize ] , pub mhz : f32 , pub clock_mhz : :: std :: os :: raw :: c_int , pub reserved : [ :: std :: os :: raw :: c_int ; 8usize ] , } # [ test ] fn bindgen_test_layout__papi_hw_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_hw_info > ( ) , 1480usize , concat ! ( "Size of: " , stringify ! ( _papi_hw_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_hw_info > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_hw_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . ncpu as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( ncpu ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . threads as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( threads ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . cores as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( cores ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . sockets as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( sockets ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . nnodes as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( nnodes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . totalcpus as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( totalcpus ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . vendor as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( vendor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . vendor_string as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( vendor_string ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . model as * const _ as usize } , 156usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( model ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . model_string as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( model_string ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . revision as * const _ as usize } , 288usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( revision ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . cpuid_family as * const _ as usize } , 292usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( cpuid_family ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . cpuid_model as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( cpuid_model ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . cpuid_stepping as * const _ as usize } , 300usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( cpuid_stepping ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . cpu_max_mhz as * const _ as usize } , 304usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( cpu_max_mhz ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . cpu_min_mhz as * const _ as usize } , 308usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( cpu_min_mhz ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . mem_hierarchy as * const _ as usize } , 312usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( mem_hierarchy ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . virtualized as * const _ as usize } , 1180usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( virtualized ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . virtual_vendor_string as * const _ as usize } , 1184usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( virtual_vendor_string ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . virtual_vendor_version as * const _ as usize } , 1312usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( virtual_vendor_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . mhz as * const _ as usize } , 1440usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( mhz ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . clock_mhz as * const _ as usize } , 1444usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( clock_mhz ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_hw_info > ( ) ) ) . reserved as * const _ as usize } , 1448usize , concat ! ( "Offset of field: " , stringify ! ( _papi_hw_info ) , "::" , stringify ! ( reserved ) ) ) ; } pub type PAPI_hw_info_t = _papi_hw_info ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_attach_option { pub eventset : :: std :: os :: raw :: c_int , pub tid : :: std :: os :: raw :: c_ulong , } # [ test ] fn bindgen_test_layout__papi_attach_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_attach_option > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _papi_attach_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_attach_option > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_attach_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_attach_option > ( ) ) ) . eventset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_attach_option ) , "::" , stringify ! ( eventset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_attach_option > ( ) ) ) . tid as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_attach_option ) , "::" , stringify ! ( tid ) ) ) ; } pub type PAPI_attach_option_t = _papi_attach_option ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_cpu_option { pub eventset : :: std :: os :: raw :: c_int , pub cpu_num : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout__papi_cpu_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_cpu_option > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _papi_cpu_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_cpu_option > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_cpu_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_cpu_option > ( ) ) ) . eventset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_cpu_option ) , "::" , stringify ! ( eventset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_cpu_option > ( ) ) ) . cpu_num as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_cpu_option ) , "::" , stringify ! ( cpu_num ) ) ) ; } pub type PAPI_cpu_option_t = _papi_cpu_option ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_multiplex_option { pub eventset : :: std :: os :: raw :: c_int , pub ns : :: std :: os :: raw :: c_int , pub flags : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_multiplex_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_multiplex_option > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( _papi_multiplex_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_multiplex_option > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _papi_multiplex_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_multiplex_option > ( ) ) ) . eventset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_multiplex_option ) , "::" , stringify ! ( eventset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_multiplex_option > ( ) ) ) . ns as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _papi_multiplex_option ) , "::" , stringify ! ( ns ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_multiplex_option > ( ) ) ) . flags as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_multiplex_option ) , "::" , stringify ! ( flags ) ) ) ; } pub type PAPI_multiplex_option_t = _papi_multiplex_option ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _papi_addr_range_option { pub eventset : :: std :: os :: raw :: c_int , pub start : caddr_t , pub end : caddr_t , pub start_off : :: std :: os :: raw :: c_int , pub end_off : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__papi_addr_range_option ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _papi_addr_range_option > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _papi_addr_range_option ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _papi_addr_range_option > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _papi_addr_range_option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_addr_range_option > ( ) ) ) . eventset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _papi_addr_range_option ) , "::" , stringify ! ( eventset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_addr_range_option > ( ) ) ) . start as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _papi_addr_range_option ) , "::" , stringify ! ( start ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_addr_range_option > ( ) ) ) . end as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _papi_addr_range_option ) , "::" , stringify ! ( end ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_addr_range_option > ( ) ) ) . start_off as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _papi_addr_range_option ) , "::" , stringify ! ( start_off ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _papi_addr_range_option > ( ) ) ) . end_off as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( _papi_addr_range_option ) , "::" , stringify ! ( end_off ) ) ) ; } pub type PAPI_addr_range_option_t = _papi_addr_range_option ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union PAPI_option_t { pub preload : PAPI_preload_info_t , pub debug : PAPI_debug_option_t , pub inherit : PAPI_inherit_option_t , pub granularity : PAPI_granularity_option_t , pub defgranularity : PAPI_granularity_option_t , pub domain : PAPI_domain_option_t , pub defdomain : PAPI_domain_option_t , pub attach : PAPI_attach_option_t , pub cpu : PAPI_cpu_option_t , pub multiplex : PAPI_multiplex_option_t , pub itimer : PAPI_itimer_option_t , pub hw_info : * mut PAPI_hw_info_t , pub shlib_info : * mut PAPI_shlib_info_t , pub exe_info : * mut PAPI_exe_info_t , pub cmp_info : * mut PAPI_component_info_t , pub addr : PAPI_addr_range_option_t , pub events_file : PAPI_user_defined_events_file_t , _bindgen_union_align : [ u64 ; 33usize ] , } # [ test ] fn bindgen_test_layout_PAPI_option_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < PAPI_option_t > ( ) , 264usize , concat ! ( "Size of: " , stringify ! ( PAPI_option_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < PAPI_option_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( PAPI_option_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . preload as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( preload ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . debug as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( debug ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . inherit as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( inherit ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . granularity as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( granularity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . defgranularity as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( defgranularity ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . domain as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( domain ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . defdomain as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( defdomain ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . attach as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( attach ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . cpu as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( cpu ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . multiplex as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( multiplex ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . itimer as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( itimer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . hw_info as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( hw_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . shlib_info as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( shlib_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . exe_info as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( exe_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . cmp_info as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( cmp_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . addr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( addr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < PAPI_option_t > ( ) ) ) . events_file as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( PAPI_option_t ) , "::" , stringify ! ( events_file ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _dmem_t { pub peak : :: std :: os :: raw :: c_longlong , pub size : :: std :: os :: raw :: c_longlong , pub resident : :: std :: os :: raw :: c_longlong , pub high_water_mark : :: std :: os :: raw :: c_longlong , pub shared : :: std :: os :: raw :: c_longlong , pub text : :: std :: os :: raw :: c_longlong , pub library : :: std :: os :: raw :: c_longlong , pub heap : :: std :: os :: raw :: c_longlong , pub locked : :: std :: os :: raw :: c_longlong , pub stack : :: std :: os :: raw :: c_longlong , pub pagesize : :: std :: os :: raw :: c_longlong , pub pte : :: std :: os :: raw :: c_longlong , } # [ test ] fn bindgen_test_layout__dmem_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _dmem_t > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( _dmem_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _dmem_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _dmem_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . peak as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( peak ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . resident as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( resident ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . high_water_mark as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( high_water_mark ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . shared as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( shared ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . text as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( text ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . library as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( library ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . heap as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( heap ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . locked as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( locked ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . stack as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( stack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . pagesize as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( pagesize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _dmem_t > ( ) ) ) . pte as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( _dmem_t ) , "::" , stringify ! ( pte ) ) ) ; } pub type PAPI_dmem_info_t = _dmem_t ; pub const PAPI_LOCATION_CORE : _bindgen_ty_12 = 0 ; pub const PAPI_LOCATION_CPU : _bindgen_ty_12 = 1 ; pub const PAPI_LOCATION_PACKAGE : _bindgen_ty_12 = 2 ; pub const PAPI_LOCATION_UNCORE : _bindgen_ty_12 = 3 ; pub type _bindgen_ty_12 = u32 ; pub const PAPI_VALUETYPE_RUNNING_SUM : _bindgen_ty_14 = 0 ; pub const PAPI_VALUETYPE_ABSOLUTE : _bindgen_ty_14 = 1 ; pub type _bindgen_ty_14 = u32 ; pub const PAPI_TIMESCOPE_SINCE_START : _bindgen_ty_15 = 0 ; pub const PAPI_TIMESCOPE_SINCE_LAST : _bindgen_ty_15 = 1 ; pub const PAPI_TIMESCOPE_UNTIL_NEXT : _bindgen_ty_15 = 2 ; pub const PAPI_TIMESCOPE_POINT : _bindgen_ty_15 = 3 ; pub type _bindgen_ty_15 = u32 ; pub const PAPI_UPDATETYPE_ARBITRARY : _bindgen_ty_16 = 0 ; pub const PAPI_UPDATETYPE_PUSH : _bindgen_ty_16 = 1 ; pub const PAPI_UPDATETYPE_PULL : _bindgen_ty_16 = 2 ; pub const PAPI_UPDATETYPE_FIXEDFREQ : _bindgen_ty_16 = 3 ; pub type _bindgen_ty_16 = u32 ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct event_info { pub event_code : :: std :: os :: raw :: c_uint , pub symbol : [ :: std :: os :: raw :: c_char ; 1024usize ] , pub short_descr : [ :: std :: os :: raw :: c_char ; 64usize ] , pub long_descr : [ :: std :: os :: raw :: c_char ; 1024usize ] , pub component_index : :: std :: os :: raw :: c_int , pub units : [ :: std :: os :: raw :: c_char ; 64usize ] , pub location : :: std :: os :: raw :: c_int , pub data_type : :: std :: os :: raw :: c_int , pub value_type : :: std :: os :: raw :: c_int , pub timescope : :: std :: os :: raw :: c_int , pub update_type : :: std :: os :: raw :: c_int , pub update_freq : :: std :: os :: raw :: c_int , pub count : :: std :: os :: raw :: c_uint , pub event_type : :: std :: os :: raw :: c_uint , pub derived : [ :: std :: os :: raw :: c_char ; 64usize ] , pub postfix : [ :: std :: os :: raw :: c_char ; 256usize ] , pub code : [ :: std :: os :: raw :: c_uint ; 12usize ] , pub name : [ [ :: std :: os :: raw :: c_char ; 256usize ] ; 12usize ] , pub note : [ :: std :: os :: raw :: c_char ; 1024usize ] , } # [ test ] fn bindgen_test_layout_event_info ( ) { assert_eq ! ( :: std :: mem :: size_of :: < event_info > ( ) , 6680usize , concat ! ( "Size of: " , stringify ! ( event_info ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < event_info > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( event_info ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . event_code as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( event_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . symbol as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( symbol ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . short_descr as * const _ as usize } , 1028usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( short_descr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . long_descr as * const _ as usize } , 1092usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( long_descr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . component_index as * const _ as usize } , 2116usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( component_index ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . units as * const _ as usize } , 2120usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( units ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . location as * const _ as usize } , 2184usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( location ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . data_type as * const _ as usize } , 2188usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( data_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . value_type as * const _ as usize } , 2192usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( value_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . timescope as * const _ as usize } , 2196usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( timescope ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . update_type as * const _ as usize } , 2200usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( update_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . update_freq as * const _ as usize } , 2204usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( update_freq ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . count as * const _ as usize } , 2208usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . event_type as * const _ as usize } , 2212usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( event_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . derived as * const _ as usize } , 2216usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( derived ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . postfix as * const _ as usize } , 2280usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( postfix ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . code as * const _ as usize } , 2536usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( code ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . name as * const _ as usize } , 2584usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < event_info > ( ) ) ) . note as * const _ as usize } , 5656usize , concat ! ( "Offset of field: " , stringify ! ( event_info ) , "::" , stringify ! ( note ) ) ) ; } pub type PAPI_event_info_t = event_info ; extern "C" { pub fn PAPI_accum ( EventSet : :: std :: os :: raw :: c_int , values : * mut :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_add_event ( EventSet : :: std :: os :: raw :: c_int , Event : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_add_named_event ( EventSet : :: std :: os :: raw :: c_int , EventName : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_add_events ( EventSet : :: std :: os :: raw :: c_int , Events : * mut :: std :: os :: raw :: c_int , number : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_assign_eventset_component ( EventSet : :: std :: os :: raw :: c_int , cidx : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_attach ( EventSet : :: std :: os :: raw :: c_int , tid : :: std :: os :: raw :: c_ulong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_cleanup_eventset ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_create_eventset ( EventSet : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_detach ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_destroy_eventset ( EventSet : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_enum_event ( EventCode : * mut :: std :: os :: raw :: c_int , modifier : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_enum_cmp_event ( EventCode : * mut :: std :: os :: raw :: c_int , modifier : :: std :: os :: raw :: c_int , cidx : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_event_code_to_name ( EventCode : :: std :: os :: raw :: c_int , out : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_event_name_to_code ( in_ : * const :: std :: os :: raw :: c_char , out : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_dmem_info ( dest : * mut PAPI_dmem_info_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_event_info ( EventCode : :: std :: os :: raw :: c_int , info : * mut PAPI_event_info_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_executable_info ( ) -> * const PAPI_exe_info_t ; } extern "C" { pub fn PAPI_get_hardware_info ( ) -> * const PAPI_hw_info_t ; } extern "C" { pub fn PAPI_get_component_info ( cidx : :: std :: os :: raw :: c_int ) -> * const PAPI_component_info_t ; } extern "C" { pub fn PAPI_get_multiplex ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_opt ( option : :: std :: os :: raw :: c_int , ptr : * mut PAPI_option_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_cmp_opt ( option : :: std :: os :: raw :: c_int , ptr : * mut PAPI_option_t , cidx : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_real_cyc ( ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn PAPI_get_real_nsec ( ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn PAPI_get_real_usec ( ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn PAPI_get_shared_lib_info ( ) -> * const PAPI_shlib_info_t ; } extern "C" { pub fn PAPI_get_thr_specific ( tag : :: std :: os :: raw :: c_int , ptr : * mut * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_overflow_event_index ( Eventset : :: std :: os :: raw :: c_int , overflow_vector : :: std :: os :: raw :: c_longlong , array : * mut :: std :: os :: raw :: c_int , number : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_virt_cyc ( ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn PAPI_get_virt_nsec ( ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn PAPI_get_virt_usec ( ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn PAPI_is_initialized ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_library_init ( version : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_list_events ( EventSet : :: std :: os :: raw :: c_int , Events : * mut :: std :: os :: raw :: c_int , number : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_list_threads ( tids : * mut :: std :: os :: raw :: c_ulong , number : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_lock ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_multiplex_init ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_num_cmp_hwctrs ( cidx : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_num_events ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_overflow ( EventSet : :: std :: os :: raw :: c_int , EventCode : :: std :: os :: raw :: c_int , threshold : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int , handler : PAPI_overflow_handler_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_perror ( msg : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn PAPI_profil ( buf : * mut :: std :: os :: raw :: c_void , bufsiz : :: std :: os :: raw :: c_uint , offset : caddr_t , scale : :: std :: os :: raw :: c_uint , EventSet : :: std :: os :: raw :: c_int , EventCode : :: std :: os :: raw :: c_int , threshold : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_query_event ( EventCode : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_query_named_event ( EventName : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_read ( EventSet : :: std :: os :: raw :: c_int , values : * mut :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_read_ts ( EventSet : :: std :: os :: raw :: c_int , values : * mut :: std :: os :: raw :: c_longlong , cyc : * mut :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_register_thread ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_remove_event ( EventSet : :: std :: os :: raw :: c_int , EventCode : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_remove_named_event ( EventSet : :: std :: os :: raw :: c_int , EventName : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_remove_events ( EventSet : :: std :: os :: raw :: c_int , Events : * mut :: std :: os :: raw :: c_int , number : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_reset ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_debug ( level : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_cmp_domain ( domain : :: std :: os :: raw :: c_int , cidx : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_domain ( domain : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_cmp_granularity ( granularity : :: std :: os :: raw :: c_int , cidx : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_granularity ( granularity : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_multiplex ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_opt ( option : :: std :: os :: raw :: c_int , ptr : * mut PAPI_option_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_set_thr_specific ( tag : :: std :: os :: raw :: c_int , ptr : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_shutdown ( ) ; } extern "C" { pub fn PAPI_sprofil ( prof : * mut PAPI_sprofil_t , profcnt : :: std :: os :: raw :: c_int , EventSet : :: std :: os :: raw :: c_int , EventCode : :: std :: os :: raw :: c_int , threshold : :: std :: os :: raw :: c_int , flags : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_start ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_state ( EventSet : :: std :: os :: raw :: c_int , status : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_stop ( EventSet : :: std :: os :: raw :: c_int , values : * mut :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_strerror ( arg1 : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn PAPI_thread_id ( ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn PAPI_thread_init ( id_fn : :: std :: option :: Option < unsafe extern "C" fn ( ) -> :: std :: os :: raw :: c_ulong > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_unlock ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_unregister_thread ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_write ( EventSet : :: std :: os :: raw :: c_int , values : * mut :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_event_component ( EventCode : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_eventset_component ( EventSet : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_get_component_index ( name : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_disable_component ( cidx : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_disable_component_by_name ( name : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_num_components ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_flips_rate ( event : :: std :: os :: raw :: c_int , rtime : * mut f32 , ptime : * mut f32 , flpins : * mut :: std :: os :: raw :: c_longlong , mflips : * mut f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_flops_rate ( event : :: std :: os :: raw :: c_int , rtime : * mut f32 , ptime : * mut f32 , flpops : * mut :: std :: os :: raw :: c_longlong , mflops : * mut f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_ipc ( rtime : * mut f32 , ptime : * mut f32 , ins : * mut :: std :: os :: raw :: c_longlong , ipc : * mut f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_epc ( event : :: std :: os :: raw :: c_int , rtime : * mut f32 , ptime : * mut f32 , ref_ : * mut :: std :: os :: raw :: c_longlong , core : * mut :: std :: os :: raw :: c_longlong , evt : * mut :: std :: os :: raw :: c_longlong , epc : * mut f32 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_rate_stop ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_hl_region_begin ( region : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_hl_read ( region : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_hl_region_end ( region : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_hl_stop ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn PAPI_num_hwctrs ( ) -> :: std :: os :: raw :: c_int ; }